
dma-parallel-port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08004264  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004264  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001239b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027d7  00000000  00000000  000323d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00034bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee0  00000000  00000000  00035be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205ad  00000000  00000000  00036ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc46  00000000  00000000  00057075  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3198  00000000  00000000  00064cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127e53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a8  00000000  00000000  00127ed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004208 	.word	0x08004208

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004208 	.word	0x08004208

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000522:	2003      	movs	r0, #3
 8000524:	f000 f938 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000528:	2000      	movs	r0, #0
 800052a:	f000 f80d 	bl	8000548 <HAL_InitTick>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	e001      	b.n	800053e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800053a:	f003 fc89 	bl	8003e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800053e:	79fb      	ldrb	r3, [r7, #7]

}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000554:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <HAL_InitTick+0x68>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d022      	beq.n	80005a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_InitTick+0x6c>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <HAL_InitTick+0x68>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000568:	fbb1 f3f3 	udiv	r3, r1, r3
 800056c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f944 	bl	80007fe <HAL_SYSTICK_Config>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10f      	bne.n	800059c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b0f      	cmp	r3, #15
 8000580:	d809      	bhi.n	8000596 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000582:	2200      	movs	r2, #0
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800058a:	f000 f910 	bl	80007ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_InitTick+0x70>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e007      	b.n	80005a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e004      	b.n	80005a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e001      	b.n	80005a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000000 	.word	0x20000000

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x20>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	4a03      	ldr	r2, [pc, #12]	; (80005d8 <HAL_IncTick+0x1c>)
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028

080005f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000614:	4013      	ands	r3, r2
 8000616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <__NVIC_SetPriorityGrouping+0x44>)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	60d3      	str	r3, [r2, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <__NVIC_GetPriorityGrouping+0x18>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	f003 0307 	and.w	r3, r3, #7
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db0b      	blt.n	8000686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 021f 	and.w	r2, r3, #31
 8000674:	4907      	ldr	r1, [pc, #28]	; (8000694 <__NVIC_EnableIRQ+0x38>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f202 	lsl.w	r2, r0, r2
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff29 	bl	80005f8 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff40 	bl	8000640 <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff33 	bl	800065c <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa4 	bl	8000754 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e08d      	b.n	8000946 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	4b47      	ldr	r3, [pc, #284]	; (8000950 <HAL_DMA_Init+0x138>)
 8000832:	429a      	cmp	r2, r3
 8000834:	d80f      	bhi.n	8000856 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b45      	ldr	r3, [pc, #276]	; (8000954 <HAL_DMA_Init+0x13c>)
 800083e:	4413      	add	r3, r2
 8000840:	4a45      	ldr	r2, [pc, #276]	; (8000958 <HAL_DMA_Init+0x140>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	009a      	lsls	r2, r3, #2
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a42      	ldr	r2, [pc, #264]	; (800095c <HAL_DMA_Init+0x144>)
 8000852:	641a      	str	r2, [r3, #64]	; 0x40
 8000854:	e00e      	b.n	8000874 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	4b40      	ldr	r3, [pc, #256]	; (8000960 <HAL_DMA_Init+0x148>)
 800085e:	4413      	add	r3, r2
 8000860:	4a3d      	ldr	r2, [pc, #244]	; (8000958 <HAL_DMA_Init+0x140>)
 8000862:	fba2 2303 	umull	r2, r3, r2, r3
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	009a      	lsls	r2, r3, #2
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a3c      	ldr	r2, [pc, #240]	; (8000964 <HAL_DMA_Init+0x14c>)
 8000872:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2202      	movs	r2, #2
 8000878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800088a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800088e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6a1b      	ldr	r3, [r3, #32]
 80008b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f97e 	bl	8000bc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008d4:	d102      	bne.n	80008dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80008f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d010      	beq.n	800091c <HAL_DMA_Init+0x104>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d80c      	bhi.n	800091c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f99e 	bl	8000c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	e008      	b.n	800092e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2201      	movs	r2, #1
 8000938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40020407 	.word	0x40020407
 8000954:	bffdfff8 	.word	0xbffdfff8
 8000958:	cccccccd 	.word	0xcccccccd
 800095c:	40020000 	.word	0x40020000
 8000960:	bffdfbf8 	.word	0xbffdfbf8
 8000964:	40020400 	.word	0x40020400

08000968 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000980:	2b01      	cmp	r3, #1
 8000982:	d101      	bne.n	8000988 <HAL_DMA_Start+0x20>
 8000984:	2302      	movs	r3, #2
 8000986:	e02e      	b.n	80009e6 <HAL_DMA_Start+0x7e>
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2201      	movs	r2, #1
 800098c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d11d      	bne.n	80009d8 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2202      	movs	r2, #2
 80009a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0201 	bic.w	r2, r2, #1
 80009b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 f8c3 	bl	8000b4c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e005      	b.n	80009e4 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 80009e0:	2302      	movs	r3, #2
 80009e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	2204      	movs	r2, #4
 8000a10:	409a      	lsls	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d026      	beq.n	8000a68 <HAL_DMA_IRQHandler+0x7a>
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d021      	beq.n	8000a68 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d107      	bne.n	8000a42 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 0204 	bic.w	r2, r2, #4
 8000a40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f003 021f 	and.w	r2, r3, #31
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	2104      	movs	r1, #4
 8000a50:	fa01 f202 	lsl.w	r2, r1, r2
 8000a54:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d071      	beq.n	8000b42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000a66:	e06c      	b.n	8000b42 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	f003 031f 	and.w	r3, r3, #31
 8000a70:	2202      	movs	r2, #2
 8000a72:	409a      	lsls	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02e      	beq.n	8000ada <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d029      	beq.n	8000ada <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 0320 	and.w	r3, r3, #32
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d10b      	bne.n	8000aac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 020a 	bic.w	r2, r2, #10
 8000aa2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	2102      	movs	r1, #2
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d038      	beq.n	8000b42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000ad8:	e033      	b.n	8000b42 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d02a      	beq.n	8000b44 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d025      	beq.n	8000b44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 020e 	bic.w	r2, r2, #14
 8000b06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	2101      	movs	r1, #1
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
}
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d004      	beq.n	8000b76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b74:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f003 021f 	and.w	r2, r3, #31
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	2101      	movs	r1, #1
 8000b84:	fa01 f202 	lsl.w	r2, r1, r2
 8000b88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b10      	cmp	r3, #16
 8000b98:	d108      	bne.n	8000bac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000baa:	e007      	b.n	8000bbc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	60da      	str	r2, [r3, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d802      	bhi.n	8000be2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e001      	b.n	8000be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000be4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3b08      	subs	r3, #8
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	091b      	lsrs	r3, r3, #4
 8000bfa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	009a      	lsls	r2, r3, #2
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4413      	add	r3, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000c12:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40020407 	.word	0x40020407
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020820 	.word	0x40020820
 8000c3c:	cccccccd 	.word	0xcccccccd
 8000c40:	40020880 	.word	0x40020880

08000c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000c66:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f003 031f 	and.w	r3, r3, #31
 8000c70:	2201      	movs	r2, #1
 8000c72:	409a      	lsls	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	1000823f 	.word	0x1000823f
 8000c88:	40020940 	.word	0x40020940

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c9a:	e15a      	b.n	8000f52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 814c 	beq.w	8000f4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x38>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b12      	cmp	r3, #18
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	6939      	ldr	r1, [r7, #16]
 8000d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0203 	and.w	r2, r3, #3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d00b      	beq.n	8000d60 <HAL_GPIO_Init+0xd4>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d007      	beq.n	8000d60 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	2b11      	cmp	r3, #17
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b12      	cmp	r3, #18
 8000d5e:	d130      	bne.n	8000dc2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d96:	2201      	movs	r2, #1
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	f003 0201 	and.w	r2, r3, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 80a6 	beq.w	8000f4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <HAL_GPIO_Init+0x2e4>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e04:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <HAL_GPIO_Init+0x2e4>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0c:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <HAL_GPIO_Init+0x2e4>)
 8000e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e18:	4a56      	ldr	r2, [pc, #344]	; (8000f74 <HAL_GPIO_Init+0x2e8>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e42:	d01f      	beq.n	8000e84 <HAL_GPIO_Init+0x1f8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <HAL_GPIO_Init+0x2ec>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d019      	beq.n	8000e80 <HAL_GPIO_Init+0x1f4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a4b      	ldr	r2, [pc, #300]	; (8000f7c <HAL_GPIO_Init+0x2f0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_Init+0x1f0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <HAL_GPIO_Init+0x2f4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_Init+0x1ec>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <HAL_GPIO_Init+0x2f8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x1e8>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_GPIO_Init+0x2fc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_Init+0x1e4>
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	e00a      	b.n	8000e86 <HAL_GPIO_Init+0x1fa>
 8000e70:	2306      	movs	r3, #6
 8000e72:	e008      	b.n	8000e86 <HAL_GPIO_Init+0x1fa>
 8000e74:	2304      	movs	r3, #4
 8000e76:	e006      	b.n	8000e86 <HAL_GPIO_Init+0x1fa>
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e004      	b.n	8000e86 <HAL_GPIO_Init+0x1fa>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e002      	b.n	8000e86 <HAL_GPIO_Init+0x1fa>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <HAL_GPIO_Init+0x1fa>
 8000e84:	2300      	movs	r3, #0
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	f002 0203 	and.w	r2, r2, #3
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	4093      	lsls	r3, r2
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e96:	4937      	ldr	r1, [pc, #220]	; (8000f74 <HAL_GPIO_Init+0x2e8>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ea4:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ec8:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef2:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_GPIO_Init+0x300>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f47f ae9d 	bne.w	8000c9c <HAL_GPIO_Init+0x10>
  }
}
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48001400 	.word	0x48001400
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d141      	bne.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fce:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d131      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fdc:	4b47      	ldr	r3, [pc, #284]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff4:	4a41      	ldr	r2, [pc, #260]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2232      	movs	r2, #50	; 0x32
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4a3f      	ldr	r2, [pc, #252]	; (8001104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001012:	e002      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3b01      	subs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001026:	d102      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f2      	bne.n	8001014 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103a:	d158      	bne.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e057      	b.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800104c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001050:	e04d      	b.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001058:	d141      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001066:	d131      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2232      	movs	r2, #50	; 0x32
 800108e:	fb02 f303 	mul.w	r3, r2, r3
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	0c9b      	lsrs	r3, r3, #18
 800109a:	3301      	adds	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109e:	e002      	b.n	80010a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b2:	d102      	bne.n	80010ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f2      	bne.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c6:	d112      	bne.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e011      	b.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010dc:	e007      	b.n	80010ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40007000 	.word	0x40007000
 8001100:	20000008 	.word	0x20000008
 8001104:	431bde83 	.word	0x431bde83

08001108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e308      	b.n	800172c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d075      	beq.n	8001212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001126:	4ba3      	ldr	r3, [pc, #652]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001130:	4ba0      	ldr	r3, [pc, #640]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b0c      	cmp	r3, #12
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x3e>
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d002      	beq.n	800114c <HAL_RCC_OscConfig+0x44>
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b08      	cmp	r3, #8
 800114a:	d10b      	bne.n	8001164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	4b99      	ldr	r3, [pc, #612]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d05b      	beq.n	8001210 <HAL_RCC_OscConfig+0x108>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d157      	bne.n	8001210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e2e3      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d106      	bne.n	800117c <HAL_RCC_OscConfig+0x74>
 800116e:	4b91      	ldr	r3, [pc, #580]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a90      	ldr	r2, [pc, #576]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e01d      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x98>
 8001186:	4b8b      	ldr	r3, [pc, #556]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a8a      	ldr	r2, [pc, #552]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b88      	ldr	r3, [pc, #544]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a87      	ldr	r2, [pc, #540]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 80011a0:	4b84      	ldr	r3, [pc, #528]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a83      	ldr	r2, [pc, #524]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b81      	ldr	r3, [pc, #516]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a80      	ldr	r2, [pc, #512]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fa0e 	bl	80005e0 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fa0a 	bl	80005e0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e2a8      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011da:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xc0>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff f9fa 	bl	80005e0 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff f9f6 	bl	80005e0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e294      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001202:	4b6c      	ldr	r3, [pc, #432]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0xe8>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121e:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001228:	4b62      	ldr	r3, [pc, #392]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b0c      	cmp	r3, #12
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x136>
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d002      	beq.n	8001244 <HAL_RCC_OscConfig+0x13c>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b04      	cmp	r3, #4
 8001242:	d11f      	bne.n	8001284 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x154>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e267      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b55      	ldr	r3, [pc, #340]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	061b      	lsls	r3, r3, #24
 800126a:	4952      	ldr	r1, [pc, #328]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001270:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <HAL_RCC_OscConfig+0x2b0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f967 	bl	8000548 <HAL_InitTick>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d043      	beq.n	8001308 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e253      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d023      	beq.n	80012d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff f9a2 	bl	80005e0 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff f99e 	bl	80005e0 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e23c      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b2:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	061b      	lsls	r3, r3, #24
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
 80012d2:	e01a      	b.n	800130a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff f97e 	bl	80005e0 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff f97a 	bl	80005e0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e218      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1e0>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d03c      	beq.n	8001390 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d01c      	beq.n	8001358 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001324:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff f957 	bl	80005e0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff f953 	bl	80005e0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1f1      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0ef      	beq.n	8001336 <HAL_RCC_OscConfig+0x22e>
 8001356:	e01b      	b.n	8001390 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff f93a 	bl	80005e0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff f936 	bl	80005e0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1d4      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1ef      	bne.n	8001370 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80ab 	beq.w	80014f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x2b4>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e005      	b.n	80013be <HAL_RCC_OscConfig+0x2b6>
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	20000000 	.word	0x20000000
 80013bc:	2300      	movs	r3, #0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00d      	beq.n	80013de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4baf      	ldr	r3, [pc, #700]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c6:	4aae      	ldr	r2, [pc, #696]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6593      	str	r3, [r2, #88]	; 0x58
 80013ce:	4bac      	ldr	r3, [pc, #688]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013da:	2301      	movs	r3, #1
 80013dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013de:	4ba9      	ldr	r3, [pc, #676]	; (8001684 <HAL_RCC_OscConfig+0x57c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d118      	bne.n	800141c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ea:	4ba6      	ldr	r3, [pc, #664]	; (8001684 <HAL_RCC_OscConfig+0x57c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4aa5      	ldr	r2, [pc, #660]	; (8001684 <HAL_RCC_OscConfig+0x57c>)
 80013f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f6:	f7ff f8f3 	bl	80005e0 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7ff f8ef 	bl	80005e0 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e18d      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001410:	4b9c      	ldr	r3, [pc, #624]	; (8001684 <HAL_RCC_OscConfig+0x57c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_RCC_OscConfig+0x32e>
 8001424:	4b96      	ldr	r3, [pc, #600]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142a:	4a95      	ldr	r2, [pc, #596]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001434:	e024      	b.n	8001480 <HAL_RCC_OscConfig+0x378>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d110      	bne.n	8001460 <HAL_RCC_OscConfig+0x358>
 800143e:	4b90      	ldr	r3, [pc, #576]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001444:	4a8e      	ldr	r2, [pc, #568]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800144e:	4b8c      	ldr	r3, [pc, #560]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001454:	4a8a      	ldr	r2, [pc, #552]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145e:	e00f      	b.n	8001480 <HAL_RCC_OscConfig+0x378>
 8001460:	4b87      	ldr	r3, [pc, #540]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001466:	4a86      	ldr	r2, [pc, #536]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001470:	4b83      	ldr	r3, [pc, #524]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001476:	4a82      	ldr	r2, [pc, #520]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d016      	beq.n	80014b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff f8aa 	bl	80005e0 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff f8a6 	bl	80005e0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	; 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e142      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80014a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ed      	beq.n	8001490 <HAL_RCC_OscConfig+0x388>
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b6:	f7ff f893 	bl	80005e0 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff f88f 	bl	80005e0 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e12b      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d4:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ed      	bne.n	80014be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e8:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	4a64      	ldr	r2, [pc, #400]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80014ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03c      	beq.n	800157a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01c      	beq.n	8001542 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001508:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800150a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff f862 	bl	80005e0 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001520:	f7ff f85e 	bl	80005e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e0fc      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ef      	beq.n	8001520 <HAL_RCC_OscConfig+0x418>
 8001540:	e01b      	b.n	800157a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001542:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001548:	4a4d      	ldr	r2, [pc, #308]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff f845 	bl	80005e0 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800155a:	f7ff f841 	bl	80005e0 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0df      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800156c:	4b44      	ldr	r3, [pc, #272]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800156e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ef      	bne.n	800155a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80d3 	beq.w	800172a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 030c 	and.w	r3, r3, #12
 800158c:	2b0c      	cmp	r3, #12
 800158e:	f000 808d 	beq.w	80016ac <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d15a      	bne.n	8001650 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a38      	ldr	r2, [pc, #224]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80015a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff f81b 	bl	80005e0 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff f817 	bl	80005e0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0b5      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_RCC_OscConfig+0x580>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6a11      	ldr	r1, [r2, #32]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015dc:	3a01      	subs	r2, #1
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	4311      	orrs	r1, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015e6:	0212      	lsls	r2, r2, #8
 80015e8:	4311      	orrs	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015ee:	0852      	lsrs	r2, r2, #1
 80015f0:	3a01      	subs	r2, #1
 80015f2:	0552      	lsls	r2, r2, #21
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	3a01      	subs	r2, #1
 80015fe:	0652      	lsls	r2, r2, #25
 8001600:	4311      	orrs	r1, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001606:	06d2      	lsls	r2, r2, #27
 8001608:	430a      	orrs	r2, r1
 800160a:	491d      	ldr	r1, [pc, #116]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001626:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7fe ffda 	bl	80005e0 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f7fe ffd6 	bl	80005e0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e074      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x528>
 800164e:	e06c      	b.n	800172a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800165a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_RCC_OscConfig+0x578>)
 800166e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7fe ffb2 	bl	80005e0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167e:	e00e      	b.n	800169e <HAL_RCC_OscConfig+0x596>
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7fe ffa8 	bl	80005e0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e046      	b.n	800172c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <HAL_RCC_OscConfig+0x62c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x584>
 80016aa:	e03e      	b.n	800172a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e039      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_OscConfig+0x62c>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0203 	and.w	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d12c      	bne.n	8001726 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	3b01      	subs	r3, #1
 80016d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d123      	bne.n	8001726 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d11b      	bne.n	8001726 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d113      	bne.n	8001726 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	3b01      	subs	r3, #1
 800170c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d109      	bne.n	8001726 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	3b01      	subs	r3, #1
 8001720:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e11e      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b91      	ldr	r3, [pc, #580]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d910      	bls.n	8001780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 020f 	bic.w	r2, r3, #15
 8001766:	498c      	ldr	r1, [pc, #560]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b8a      	ldr	r3, [pc, #552]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e106      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d073      	beq.n	8001874 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d129      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001794:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0f4      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017a4:	f000 f99e 	bl	8001ae4 <RCC_GetSysClockFreqFromPLLSource>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4a7c      	ldr	r2, [pc, #496]	; (80019a0 <HAL_RCC_ClockConfig+0x268>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d93f      	bls.n	8001832 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017b2:	4b7a      	ldr	r3, [pc, #488]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d033      	beq.n	8001832 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d12f      	bne.n	8001832 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017d2:	4b72      	ldr	r3, [pc, #456]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017da:	4a70      	ldr	r2, [pc, #448]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80017dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e024      	b.n	8001832 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0c6      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	4b66      	ldr	r3, [pc, #408]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0be      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001810:	f000 f8ce 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <HAL_RCC_ClockConfig+0x268>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d909      	bls.n	8001832 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001826:	4a5d      	ldr	r2, [pc, #372]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b5a      	ldr	r3, [pc, #360]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4957      	ldr	r1, [pc, #348]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001844:	f7fe fecc 	bl	80005e0 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7fe fec8 	bl	80005e0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e095      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b4e      	ldr	r3, [pc, #312]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a42      	ldr	r2, [pc, #264]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001896:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018a4:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018ac:	4a3b      	ldr	r2, [pc, #236]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80018ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4936      	ldr	r1, [pc, #216]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
 80018c6:	e008      	b.n	80018da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b80      	cmp	r3, #128	; 0x80
 80018cc:	d105      	bne.n	80018da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018ce:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4a32      	ldr	r2, [pc, #200]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 80018d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d21d      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 020f 	bic.w	r2, r3, #15
 80018f0:	4929      	ldr	r1, [pc, #164]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f8:	f7fe fe72 	bl	80005e0 <HAL_GetTick>
 80018fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001900:	f7fe fe6e 	bl	80005e0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e03b      	b.n	800198e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1ed      	bne.n	8001900 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4917      	ldr	r1, [pc, #92]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490f      	ldr	r1, [pc, #60]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001962:	f000 f825 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8001966:	4601      	mov	r1, r0
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <HAL_RCC_ClockConfig+0x26c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	f003 031f 	and.w	r3, r3, #31
 800197a:	fa21 f303 	lsr.w	r3, r1, r3
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x270>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdde 	bl	8000548 <HAL_InitTick>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40022000 	.word	0x40022000
 800199c:	40021000 	.word	0x40021000
 80019a0:	04c4b400 	.word	0x04c4b400
 80019a4:	08004230 	.word	0x08004230
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e047      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d102      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e03e      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d136      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a04:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a0e:	68d2      	ldr	r2, [r2, #12]
 8001a10:	0a12      	lsrs	r2, r2, #8
 8001a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
      break;
 8001a1c:	e00c      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a28:	68d2      	ldr	r2, [r2, #12]
 8001a2a:	0a12      	lsrs	r2, r2, #8
 8001a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
      break;
 8001a36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0e5b      	lsrs	r3, r3, #25
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e001      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a58:	693b      	ldr	r3, [r7, #16]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	00f42400 	.word	0x00f42400
 8001a70:	016e3600 	.word	0x016e3600

08001a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a90:	f7ff fff0 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a94:	4601      	mov	r1, r0
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08004240 	.word	0x08004240

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001abc:	f7ff ffda 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0adb      	lsrs	r3, r3, #11
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ace:	5cd3      	ldrb	r3, [r2, r3]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	08004240 	.word	0x08004240

08001ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d10c      	bne.n	8001b22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b12:	68d2      	ldr	r2, [r2, #12]
 8001b14:	0a12      	lsrs	r2, r2, #8
 8001b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
    break;
 8001b20:	e00c      	b.n	8001b3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b2c:	68d2      	ldr	r2, [r2, #12]
 8001b2e:	0a12      	lsrs	r2, r2, #8
 8001b30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    break;
 8001b3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0e5b      	lsrs	r3, r3, #25
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	3301      	adds	r3, #1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b56:	687b      	ldr	r3, [r7, #4]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	016e3600 	.word	0x016e3600
 8001b6c:	00f42400 	.word	0x00f42400

08001b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b78:	2300      	movs	r3, #0
 8001b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8098 	beq.w	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10d      	bne.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b40      	ldr	r3, [pc, #256]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a3f      	ldr	r2, [pc, #252]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bc6:	f7fe fd0b 	bl	80005e0 <HAL_GetTick>
 8001bca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bce:	f7fe fd07 	bl	80005e0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d902      	bls.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	74fb      	strb	r3, [r7, #19]
        break;
 8001be0:	e005      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ef      	beq.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d159      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01e      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d019      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c3c:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fcc7 	bl	80005e0 <HAL_GetTick>
 8001c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c54:	e00b      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7fe fcc3 	bl	80005e0 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d902      	bls.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8001c6c:	e006      	b.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ec      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4903      	ldr	r1, [pc, #12]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c98:	e008      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c9a:	7cfb      	ldrb	r3, [r7, #19]
 8001c9c:	74bb      	strb	r3, [r7, #18]
 8001c9e:	e005      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cac:	7c7b      	ldrb	r3, [r7, #17]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d105      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb2:	4ba6      	ldr	r3, [pc, #664]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4aa5      	ldr	r2, [pc, #660]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cca:	4ba0      	ldr	r3, [pc, #640]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd0:	f023 0203 	bic.w	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	499c      	ldr	r1, [pc, #624]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cec:	4b97      	ldr	r3, [pc, #604]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	f023 020c 	bic.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4994      	ldr	r1, [pc, #592]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d0e:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	498b      	ldr	r1, [pc, #556]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d30:	4b86      	ldr	r3, [pc, #536]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	4983      	ldr	r1, [pc, #524]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d52:	4b7e      	ldr	r3, [pc, #504]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	497a      	ldr	r1, [pc, #488]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4972      	ldr	r1, [pc, #456]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d96:	4b6d      	ldr	r3, [pc, #436]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4969      	ldr	r1, [pc, #420]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4961      	ldr	r1, [pc, #388]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	4958      	ldr	r1, [pc, #352]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	4950      	ldr	r1, [pc, #320]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e1a:	d105      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e34:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	4942      	ldr	r1, [pc, #264]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e52:	d105      	bne.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4934      	ldr	r1, [pc, #208]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8a:	d105      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	4926      	ldr	r1, [pc, #152]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ece:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d015      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	4918      	ldr	r1, [pc, #96]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001efa:	d105      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d015      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	490a      	ldr	r1, [pc, #40]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f32:	d105      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001f40:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e01d      	b.n	8001f9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f002 f814 	bl	8003fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4610      	mov	r0, r2
 8001f90:	f000 f834 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_TIM_Base_Start+0x50>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_TIM_Base_Start+0x3a>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd0:	d007      	beq.n	8001fe2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	00010007 	.word	0x00010007

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <TIM_Base_SetConfig+0x104>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00f      	beq.n	8002034 <TIM_Base_SetConfig+0x38>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d00b      	beq.n	8002034 <TIM_Base_SetConfig+0x38>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a39      	ldr	r2, [pc, #228]	; (8002104 <TIM_Base_SetConfig+0x108>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <TIM_Base_SetConfig+0x38>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a38      	ldr	r2, [pc, #224]	; (8002108 <TIM_Base_SetConfig+0x10c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0x38>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a37      	ldr	r2, [pc, #220]	; (800210c <TIM_Base_SetConfig+0x110>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d108      	bne.n	8002046 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <TIM_Base_SetConfig+0x104>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01b      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002054:	d017      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2a      	ldr	r2, [pc, #168]	; (8002104 <TIM_Base_SetConfig+0x108>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a29      	ldr	r2, [pc, #164]	; (8002108 <TIM_Base_SetConfig+0x10c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00f      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a28      	ldr	r2, [pc, #160]	; (800210c <TIM_Base_SetConfig+0x110>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a27      	ldr	r2, [pc, #156]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a26      	ldr	r2, [pc, #152]	; (8002114 <TIM_Base_SetConfig+0x118>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0x8a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a25      	ldr	r2, [pc, #148]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <TIM_Base_SetConfig+0x104>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00f      	beq.n	80020e4 <TIM_Base_SetConfig+0xe8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a11      	ldr	r2, [pc, #68]	; (800210c <TIM_Base_SetConfig+0x110>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <TIM_Base_SetConfig+0xe8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <TIM_Base_SetConfig+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <TIM_Base_SetConfig+0xe8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <TIM_Base_SetConfig+0x118>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xe8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40012c00 	.word	0x40012c00
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40013400 	.word	0x40013400
 8002110:	40014000 	.word	0x40014000
 8002114:	40014400 	.word	0x40014400
 8002118:	40014800 	.word	0x40014800

0800211c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002130:	2302      	movs	r3, #2
 8002132:	e047      	b.n	80021c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800216e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002196:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40013400 	.word	0x40013400

080021d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e042      	b.n	8002270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f001 ff69 	bl	80040d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2224      	movs	r2, #36	; 0x24
 8002206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f82c 	bl	8002278 <UART_SetConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e022      	b.n	8002270 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f001 f9da 	bl	80035ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f001 fa61 	bl	8003730 <UART_CheckIdleState>
 800226e:	4603      	mov	r3, r0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800227c:	b08a      	sub	sp, #40	; 0x28
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4313      	orrs	r3, r2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4ba4      	ldr	r3, [pc, #656]	; (8002548 <UART_SetConfig+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a99      	ldr	r2, [pc, #612]	; (800254c <UART_SetConfig+0x2d4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d004      	beq.n	80022f4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f0:	4313      	orrs	r3, r2
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80022fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002308:	430b      	orrs	r3, r1
 800230a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f023 010f 	bic.w	r1, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8a      	ldr	r2, [pc, #552]	; (8002550 <UART_SetConfig+0x2d8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d126      	bne.n	800237a <UART_SetConfig+0x102>
 800232c:	4b89      	ldr	r3, [pc, #548]	; (8002554 <UART_SetConfig+0x2dc>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d81a      	bhi.n	8002370 <UART_SetConfig+0xf8>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <UART_SetConfig+0xc8>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	08002361 	.word	0x08002361
 8002348:	08002359 	.word	0x08002359
 800234c:	08002369 	.word	0x08002369
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002356:	e0d6      	b.n	8002506 <UART_SetConfig+0x28e>
 8002358:	2302      	movs	r3, #2
 800235a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800235e:	e0d2      	b.n	8002506 <UART_SetConfig+0x28e>
 8002360:	2304      	movs	r3, #4
 8002362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002366:	e0ce      	b.n	8002506 <UART_SetConfig+0x28e>
 8002368:	2308      	movs	r3, #8
 800236a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800236e:	e0ca      	b.n	8002506 <UART_SetConfig+0x28e>
 8002370:	2310      	movs	r3, #16
 8002372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002376:	bf00      	nop
 8002378:	e0c5      	b.n	8002506 <UART_SetConfig+0x28e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a76      	ldr	r2, [pc, #472]	; (8002558 <UART_SetConfig+0x2e0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d138      	bne.n	80023f6 <UART_SetConfig+0x17e>
 8002384:	4b73      	ldr	r3, [pc, #460]	; (8002554 <UART_SetConfig+0x2dc>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d82c      	bhi.n	80023ec <UART_SetConfig+0x174>
 8002392:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <UART_SetConfig+0x120>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023cd 	.word	0x080023cd
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	080023ed 	.word	0x080023ed
 80023a4:	080023ed 	.word	0x080023ed
 80023a8:	080023dd 	.word	0x080023dd
 80023ac:	080023ed 	.word	0x080023ed
 80023b0:	080023ed 	.word	0x080023ed
 80023b4:	080023ed 	.word	0x080023ed
 80023b8:	080023d5 	.word	0x080023d5
 80023bc:	080023ed 	.word	0x080023ed
 80023c0:	080023ed 	.word	0x080023ed
 80023c4:	080023ed 	.word	0x080023ed
 80023c8:	080023e5 	.word	0x080023e5
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023d2:	e098      	b.n	8002506 <UART_SetConfig+0x28e>
 80023d4:	2302      	movs	r3, #2
 80023d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023da:	e094      	b.n	8002506 <UART_SetConfig+0x28e>
 80023dc:	2304      	movs	r3, #4
 80023de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023e2:	e090      	b.n	8002506 <UART_SetConfig+0x28e>
 80023e4:	2308      	movs	r3, #8
 80023e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ea:	e08c      	b.n	8002506 <UART_SetConfig+0x28e>
 80023ec:	2310      	movs	r3, #16
 80023ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023f2:	bf00      	nop
 80023f4:	e087      	b.n	8002506 <UART_SetConfig+0x28e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a58      	ldr	r2, [pc, #352]	; (800255c <UART_SetConfig+0x2e4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d125      	bne.n	800244c <UART_SetConfig+0x1d4>
 8002400:	4b54      	ldr	r3, [pc, #336]	; (8002554 <UART_SetConfig+0x2dc>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800240a:	2b10      	cmp	r3, #16
 800240c:	d011      	beq.n	8002432 <UART_SetConfig+0x1ba>
 800240e:	2b10      	cmp	r3, #16
 8002410:	d802      	bhi.n	8002418 <UART_SetConfig+0x1a0>
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <UART_SetConfig+0x1aa>
 8002416:	e014      	b.n	8002442 <UART_SetConfig+0x1ca>
 8002418:	2b20      	cmp	r3, #32
 800241a:	d006      	beq.n	800242a <UART_SetConfig+0x1b2>
 800241c:	2b30      	cmp	r3, #48	; 0x30
 800241e:	d00c      	beq.n	800243a <UART_SetConfig+0x1c2>
 8002420:	e00f      	b.n	8002442 <UART_SetConfig+0x1ca>
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002428:	e06d      	b.n	8002506 <UART_SetConfig+0x28e>
 800242a:	2302      	movs	r3, #2
 800242c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002430:	e069      	b.n	8002506 <UART_SetConfig+0x28e>
 8002432:	2304      	movs	r3, #4
 8002434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002438:	e065      	b.n	8002506 <UART_SetConfig+0x28e>
 800243a:	2308      	movs	r3, #8
 800243c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002440:	e061      	b.n	8002506 <UART_SetConfig+0x28e>
 8002442:	2310      	movs	r3, #16
 8002444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002448:	bf00      	nop
 800244a:	e05c      	b.n	8002506 <UART_SetConfig+0x28e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a43      	ldr	r2, [pc, #268]	; (8002560 <UART_SetConfig+0x2e8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d125      	bne.n	80024a2 <UART_SetConfig+0x22a>
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <UART_SetConfig+0x2dc>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d011      	beq.n	8002488 <UART_SetConfig+0x210>
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d802      	bhi.n	800246e <UART_SetConfig+0x1f6>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <UART_SetConfig+0x200>
 800246c:	e014      	b.n	8002498 <UART_SetConfig+0x220>
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d006      	beq.n	8002480 <UART_SetConfig+0x208>
 8002472:	2bc0      	cmp	r3, #192	; 0xc0
 8002474:	d00c      	beq.n	8002490 <UART_SetConfig+0x218>
 8002476:	e00f      	b.n	8002498 <UART_SetConfig+0x220>
 8002478:	2300      	movs	r3, #0
 800247a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800247e:	e042      	b.n	8002506 <UART_SetConfig+0x28e>
 8002480:	2302      	movs	r3, #2
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002486:	e03e      	b.n	8002506 <UART_SetConfig+0x28e>
 8002488:	2304      	movs	r3, #4
 800248a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800248e:	e03a      	b.n	8002506 <UART_SetConfig+0x28e>
 8002490:	2308      	movs	r3, #8
 8002492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002496:	e036      	b.n	8002506 <UART_SetConfig+0x28e>
 8002498:	2310      	movs	r3, #16
 800249a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800249e:	bf00      	nop
 80024a0:	e031      	b.n	8002506 <UART_SetConfig+0x28e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <UART_SetConfig+0x2d4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d129      	bne.n	8002500 <UART_SetConfig+0x288>
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <UART_SetConfig+0x2dc>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ba:	d014      	beq.n	80024e6 <UART_SetConfig+0x26e>
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c0:	d802      	bhi.n	80024c8 <UART_SetConfig+0x250>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <UART_SetConfig+0x25e>
 80024c6:	e016      	b.n	80024f6 <UART_SetConfig+0x27e>
 80024c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024cc:	d007      	beq.n	80024de <UART_SetConfig+0x266>
 80024ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024d2:	d00c      	beq.n	80024ee <UART_SetConfig+0x276>
 80024d4:	e00f      	b.n	80024f6 <UART_SetConfig+0x27e>
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024dc:	e013      	b.n	8002506 <UART_SetConfig+0x28e>
 80024de:	2302      	movs	r3, #2
 80024e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024e4:	e00f      	b.n	8002506 <UART_SetConfig+0x28e>
 80024e6:	2304      	movs	r3, #4
 80024e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024ec:	e00b      	b.n	8002506 <UART_SetConfig+0x28e>
 80024ee:	2308      	movs	r3, #8
 80024f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024f4:	e007      	b.n	8002506 <UART_SetConfig+0x28e>
 80024f6:	2310      	movs	r3, #16
 80024f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024fc:	bf00      	nop
 80024fe:	e002      	b.n	8002506 <UART_SetConfig+0x28e>
 8002500:	2310      	movs	r3, #16
 8002502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <UART_SetConfig+0x2d4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	f040 842e 	bne.w	8002d6e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002516:	2b08      	cmp	r3, #8
 8002518:	f200 8169 	bhi.w	80027ee <UART_SetConfig+0x576>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <UART_SetConfig+0x2ac>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002565 	.word	0x08002565
 8002528:	080027ef 	.word	0x080027ef
 800252c:	08002607 	.word	0x08002607
 8002530:	080027ef 	.word	0x080027ef
 8002534:	0800269f 	.word	0x0800269f
 8002538:	080027ef 	.word	0x080027ef
 800253c:	080027ef 	.word	0x080027ef
 8002540:	080027ef 	.word	0x080027ef
 8002544:	08002741 	.word	0x08002741
 8002548:	cfff69f3 	.word	0xcfff69f3
 800254c:	40008000 	.word	0x40008000
 8002550:	40013800 	.word	0x40013800
 8002554:	40021000 	.word	0x40021000
 8002558:	40004400 	.word	0x40004400
 800255c:	40004800 	.word	0x40004800
 8002560:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002564:	f7ff fa92 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002568:	4602      	mov	r2, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d044      	beq.n	80025fc <UART_SetConfig+0x384>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2b01      	cmp	r3, #1
 8002578:	d03e      	beq.n	80025f8 <UART_SetConfig+0x380>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b02      	cmp	r3, #2
 8002580:	d038      	beq.n	80025f4 <UART_SetConfig+0x37c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b03      	cmp	r3, #3
 8002588:	d032      	beq.n	80025f0 <UART_SetConfig+0x378>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b04      	cmp	r3, #4
 8002590:	d02c      	beq.n	80025ec <UART_SetConfig+0x374>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	2b05      	cmp	r3, #5
 8002598:	d026      	beq.n	80025e8 <UART_SetConfig+0x370>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d020      	beq.n	80025e4 <UART_SetConfig+0x36c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	d01a      	beq.n	80025e0 <UART_SetConfig+0x368>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d014      	beq.n	80025dc <UART_SetConfig+0x364>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b09      	cmp	r3, #9
 80025b8:	d00e      	beq.n	80025d8 <UART_SetConfig+0x360>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	2b0a      	cmp	r3, #10
 80025c0:	d008      	beq.n	80025d4 <UART_SetConfig+0x35c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b0b      	cmp	r3, #11
 80025c8:	d102      	bne.n	80025d0 <UART_SetConfig+0x358>
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	e016      	b.n	80025fe <UART_SetConfig+0x386>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e014      	b.n	80025fe <UART_SetConfig+0x386>
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	e012      	b.n	80025fe <UART_SetConfig+0x386>
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	e010      	b.n	80025fe <UART_SetConfig+0x386>
 80025dc:	2320      	movs	r3, #32
 80025de:	e00e      	b.n	80025fe <UART_SetConfig+0x386>
 80025e0:	2310      	movs	r3, #16
 80025e2:	e00c      	b.n	80025fe <UART_SetConfig+0x386>
 80025e4:	230c      	movs	r3, #12
 80025e6:	e00a      	b.n	80025fe <UART_SetConfig+0x386>
 80025e8:	230a      	movs	r3, #10
 80025ea:	e008      	b.n	80025fe <UART_SetConfig+0x386>
 80025ec:	2308      	movs	r3, #8
 80025ee:	e006      	b.n	80025fe <UART_SetConfig+0x386>
 80025f0:	2306      	movs	r3, #6
 80025f2:	e004      	b.n	80025fe <UART_SetConfig+0x386>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e002      	b.n	80025fe <UART_SetConfig+0x386>
 80025f8:	2302      	movs	r3, #2
 80025fa:	e000      	b.n	80025fe <UART_SetConfig+0x386>
 80025fc:	2301      	movs	r3, #1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	617b      	str	r3, [r7, #20]
        break;
 8002604:	e0f6      	b.n	80027f4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d044      	beq.n	8002698 <UART_SetConfig+0x420>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b01      	cmp	r3, #1
 8002614:	d03e      	beq.n	8002694 <UART_SetConfig+0x41c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b02      	cmp	r3, #2
 800261c:	d038      	beq.n	8002690 <UART_SetConfig+0x418>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b03      	cmp	r3, #3
 8002624:	d032      	beq.n	800268c <UART_SetConfig+0x414>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b04      	cmp	r3, #4
 800262c:	d02c      	beq.n	8002688 <UART_SetConfig+0x410>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b05      	cmp	r3, #5
 8002634:	d026      	beq.n	8002684 <UART_SetConfig+0x40c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b06      	cmp	r3, #6
 800263c:	d020      	beq.n	8002680 <UART_SetConfig+0x408>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	2b07      	cmp	r3, #7
 8002644:	d01a      	beq.n	800267c <UART_SetConfig+0x404>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b08      	cmp	r3, #8
 800264c:	d014      	beq.n	8002678 <UART_SetConfig+0x400>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	2b09      	cmp	r3, #9
 8002654:	d00e      	beq.n	8002674 <UART_SetConfig+0x3fc>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d008      	beq.n	8002670 <UART_SetConfig+0x3f8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b0b      	cmp	r3, #11
 8002664:	d102      	bne.n	800266c <UART_SetConfig+0x3f4>
 8002666:	f24f 4324 	movw	r3, #62500	; 0xf424
 800266a:	e016      	b.n	800269a <UART_SetConfig+0x422>
 800266c:	4ba1      	ldr	r3, [pc, #644]	; (80028f4 <UART_SetConfig+0x67c>)
 800266e:	e014      	b.n	800269a <UART_SetConfig+0x422>
 8002670:	4ba1      	ldr	r3, [pc, #644]	; (80028f8 <UART_SetConfig+0x680>)
 8002672:	e012      	b.n	800269a <UART_SetConfig+0x422>
 8002674:	4ba1      	ldr	r3, [pc, #644]	; (80028fc <UART_SetConfig+0x684>)
 8002676:	e010      	b.n	800269a <UART_SetConfig+0x422>
 8002678:	4ba1      	ldr	r3, [pc, #644]	; (8002900 <UART_SetConfig+0x688>)
 800267a:	e00e      	b.n	800269a <UART_SetConfig+0x422>
 800267c:	4ba1      	ldr	r3, [pc, #644]	; (8002904 <UART_SetConfig+0x68c>)
 800267e:	e00c      	b.n	800269a <UART_SetConfig+0x422>
 8002680:	4ba1      	ldr	r3, [pc, #644]	; (8002908 <UART_SetConfig+0x690>)
 8002682:	e00a      	b.n	800269a <UART_SetConfig+0x422>
 8002684:	4ba1      	ldr	r3, [pc, #644]	; (800290c <UART_SetConfig+0x694>)
 8002686:	e008      	b.n	800269a <UART_SetConfig+0x422>
 8002688:	4ba1      	ldr	r3, [pc, #644]	; (8002910 <UART_SetConfig+0x698>)
 800268a:	e006      	b.n	800269a <UART_SetConfig+0x422>
 800268c:	4ba1      	ldr	r3, [pc, #644]	; (8002914 <UART_SetConfig+0x69c>)
 800268e:	e004      	b.n	800269a <UART_SetConfig+0x422>
 8002690:	4ba1      	ldr	r3, [pc, #644]	; (8002918 <UART_SetConfig+0x6a0>)
 8002692:	e002      	b.n	800269a <UART_SetConfig+0x422>
 8002694:	4ba1      	ldr	r3, [pc, #644]	; (800291c <UART_SetConfig+0x6a4>)
 8002696:	e000      	b.n	800269a <UART_SetConfig+0x422>
 8002698:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <UART_SetConfig+0x67c>)
 800269a:	617b      	str	r3, [r7, #20]
        break;
 800269c:	e0aa      	b.n	80027f4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800269e:	f7ff f987 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d044      	beq.n	8002736 <UART_SetConfig+0x4be>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d03e      	beq.n	8002732 <UART_SetConfig+0x4ba>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d038      	beq.n	800272e <UART_SetConfig+0x4b6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d032      	beq.n	800272a <UART_SetConfig+0x4b2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d02c      	beq.n	8002726 <UART_SetConfig+0x4ae>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d026      	beq.n	8002722 <UART_SetConfig+0x4aa>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d020      	beq.n	800271e <UART_SetConfig+0x4a6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	d01a      	beq.n	800271a <UART_SetConfig+0x4a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d014      	beq.n	8002716 <UART_SetConfig+0x49e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b09      	cmp	r3, #9
 80026f2:	d00e      	beq.n	8002712 <UART_SetConfig+0x49a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d008      	beq.n	800270e <UART_SetConfig+0x496>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b0b      	cmp	r3, #11
 8002702:	d102      	bne.n	800270a <UART_SetConfig+0x492>
 8002704:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002708:	e016      	b.n	8002738 <UART_SetConfig+0x4c0>
 800270a:	2301      	movs	r3, #1
 800270c:	e014      	b.n	8002738 <UART_SetConfig+0x4c0>
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	e012      	b.n	8002738 <UART_SetConfig+0x4c0>
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	e010      	b.n	8002738 <UART_SetConfig+0x4c0>
 8002716:	2320      	movs	r3, #32
 8002718:	e00e      	b.n	8002738 <UART_SetConfig+0x4c0>
 800271a:	2310      	movs	r3, #16
 800271c:	e00c      	b.n	8002738 <UART_SetConfig+0x4c0>
 800271e:	230c      	movs	r3, #12
 8002720:	e00a      	b.n	8002738 <UART_SetConfig+0x4c0>
 8002722:	230a      	movs	r3, #10
 8002724:	e008      	b.n	8002738 <UART_SetConfig+0x4c0>
 8002726:	2308      	movs	r3, #8
 8002728:	e006      	b.n	8002738 <UART_SetConfig+0x4c0>
 800272a:	2306      	movs	r3, #6
 800272c:	e004      	b.n	8002738 <UART_SetConfig+0x4c0>
 800272e:	2304      	movs	r3, #4
 8002730:	e002      	b.n	8002738 <UART_SetConfig+0x4c0>
 8002732:	2302      	movs	r3, #2
 8002734:	e000      	b.n	8002738 <UART_SetConfig+0x4c0>
 8002736:	2301      	movs	r3, #1
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
        break;
 800273e:	e059      	b.n	80027f4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b00      	cmp	r3, #0
 8002746:	d04e      	beq.n	80027e6 <UART_SetConfig+0x56e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b01      	cmp	r3, #1
 800274e:	d047      	beq.n	80027e0 <UART_SetConfig+0x568>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2b02      	cmp	r3, #2
 8002756:	d040      	beq.n	80027da <UART_SetConfig+0x562>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b03      	cmp	r3, #3
 800275e:	d039      	beq.n	80027d4 <UART_SetConfig+0x55c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b04      	cmp	r3, #4
 8002766:	d032      	beq.n	80027ce <UART_SetConfig+0x556>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b05      	cmp	r3, #5
 800276e:	d02b      	beq.n	80027c8 <UART_SetConfig+0x550>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2b06      	cmp	r3, #6
 8002776:	d024      	beq.n	80027c2 <UART_SetConfig+0x54a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b07      	cmp	r3, #7
 800277e:	d01d      	beq.n	80027bc <UART_SetConfig+0x544>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2b08      	cmp	r3, #8
 8002786:	d016      	beq.n	80027b6 <UART_SetConfig+0x53e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b09      	cmp	r3, #9
 800278e:	d00f      	beq.n	80027b0 <UART_SetConfig+0x538>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d008      	beq.n	80027aa <UART_SetConfig+0x532>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b0b      	cmp	r3, #11
 800279e:	d101      	bne.n	80027a4 <UART_SetConfig+0x52c>
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	e022      	b.n	80027ea <UART_SetConfig+0x572>
 80027a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a8:	e01f      	b.n	80027ea <UART_SetConfig+0x572>
 80027aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ae:	e01c      	b.n	80027ea <UART_SetConfig+0x572>
 80027b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b4:	e019      	b.n	80027ea <UART_SetConfig+0x572>
 80027b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ba:	e016      	b.n	80027ea <UART_SetConfig+0x572>
 80027bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027c0:	e013      	b.n	80027ea <UART_SetConfig+0x572>
 80027c2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80027c6:	e010      	b.n	80027ea <UART_SetConfig+0x572>
 80027c8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80027cc:	e00d      	b.n	80027ea <UART_SetConfig+0x572>
 80027ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d2:	e00a      	b.n	80027ea <UART_SetConfig+0x572>
 80027d4:	f241 5355 	movw	r3, #5461	; 0x1555
 80027d8:	e007      	b.n	80027ea <UART_SetConfig+0x572>
 80027da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027de:	e004      	b.n	80027ea <UART_SetConfig+0x572>
 80027e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027e4:	e001      	b.n	80027ea <UART_SetConfig+0x572>
 80027e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ea:	617b      	str	r3, [r7, #20]
        break;
 80027ec:	e002      	b.n	80027f4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	76fb      	strb	r3, [r7, #27]
        break;
 80027f2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 86cd 	beq.w	8003596 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	429a      	cmp	r2, r3
 800280a:	d305      	bcc.n	8002818 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d903      	bls.n	8002820 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	76fb      	strb	r3, [r7, #27]
 800281c:	f000 bebb 	b.w	8003596 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8002820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002824:	2b08      	cmp	r3, #8
 8002826:	f200 828d 	bhi.w	8002d44 <UART_SetConfig+0xacc>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <UART_SetConfig+0x5b8>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002855 	.word	0x08002855
 8002834:	08002d45 	.word	0x08002d45
 8002838:	080029bf 	.word	0x080029bf
 800283c:	08002d45 	.word	0x08002d45
 8002840:	08002ab5 	.word	0x08002ab5
 8002844:	08002d45 	.word	0x08002d45
 8002848:	08002d45 	.word	0x08002d45
 800284c:	08002d45 	.word	0x08002d45
 8002850:	08002bf3 	.word	0x08002bf3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002854:	f7ff f91a 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002858:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4618      	mov	r0, r3
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07d      	beq.n	8002966 <UART_SetConfig+0x6ee>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b01      	cmp	r3, #1
 8002870:	d074      	beq.n	800295c <UART_SetConfig+0x6e4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b02      	cmp	r3, #2
 8002878:	d06b      	beq.n	8002952 <UART_SetConfig+0x6da>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b03      	cmp	r3, #3
 8002880:	d062      	beq.n	8002948 <UART_SetConfig+0x6d0>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	2b04      	cmp	r3, #4
 8002888:	d059      	beq.n	800293e <UART_SetConfig+0x6c6>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b05      	cmp	r3, #5
 8002890:	d050      	beq.n	8002934 <UART_SetConfig+0x6bc>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	2b06      	cmp	r3, #6
 8002898:	d047      	beq.n	800292a <UART_SetConfig+0x6b2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b07      	cmp	r3, #7
 80028a0:	d03e      	beq.n	8002920 <UART_SetConfig+0x6a8>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d01f      	beq.n	80028ea <UART_SetConfig+0x672>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b09      	cmp	r3, #9
 80028b0:	d016      	beq.n	80028e0 <UART_SetConfig+0x668>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b0a      	cmp	r3, #10
 80028b8:	d00d      	beq.n	80028d6 <UART_SetConfig+0x65e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	2b0b      	cmp	r3, #11
 80028c0:	d104      	bne.n	80028cc <UART_SetConfig+0x654>
 80028c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c6:	f04f 0400 	mov.w	r4, #0
 80028ca:	e050      	b.n	800296e <UART_SetConfig+0x6f6>
 80028cc:	f04f 0301 	mov.w	r3, #1
 80028d0:	f04f 0400 	mov.w	r4, #0
 80028d4:	e04b      	b.n	800296e <UART_SetConfig+0x6f6>
 80028d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80028da:	f04f 0400 	mov.w	r4, #0
 80028de:	e046      	b.n	800296e <UART_SetConfig+0x6f6>
 80028e0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80028e4:	f04f 0400 	mov.w	r4, #0
 80028e8:	e041      	b.n	800296e <UART_SetConfig+0x6f6>
 80028ea:	f04f 0320 	mov.w	r3, #32
 80028ee:	f04f 0400 	mov.w	r4, #0
 80028f2:	e03c      	b.n	800296e <UART_SetConfig+0x6f6>
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	0001e848 	.word	0x0001e848
 80028fc:	0003d090 	.word	0x0003d090
 8002900:	0007a120 	.word	0x0007a120
 8002904:	000f4240 	.word	0x000f4240
 8002908:	00145855 	.word	0x00145855
 800290c:	00186a00 	.word	0x00186a00
 8002910:	001e8480 	.word	0x001e8480
 8002914:	0028b0aa 	.word	0x0028b0aa
 8002918:	003d0900 	.word	0x003d0900
 800291c:	007a1200 	.word	0x007a1200
 8002920:	f04f 0310 	mov.w	r3, #16
 8002924:	f04f 0400 	mov.w	r4, #0
 8002928:	e021      	b.n	800296e <UART_SetConfig+0x6f6>
 800292a:	f04f 030c 	mov.w	r3, #12
 800292e:	f04f 0400 	mov.w	r4, #0
 8002932:	e01c      	b.n	800296e <UART_SetConfig+0x6f6>
 8002934:	f04f 030a 	mov.w	r3, #10
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	e017      	b.n	800296e <UART_SetConfig+0x6f6>
 800293e:	f04f 0308 	mov.w	r3, #8
 8002942:	f04f 0400 	mov.w	r4, #0
 8002946:	e012      	b.n	800296e <UART_SetConfig+0x6f6>
 8002948:	f04f 0306 	mov.w	r3, #6
 800294c:	f04f 0400 	mov.w	r4, #0
 8002950:	e00d      	b.n	800296e <UART_SetConfig+0x6f6>
 8002952:	f04f 0304 	mov.w	r3, #4
 8002956:	f04f 0400 	mov.w	r4, #0
 800295a:	e008      	b.n	800296e <UART_SetConfig+0x6f6>
 800295c:	f04f 0302 	mov.w	r3, #2
 8002960:	f04f 0400 	mov.w	r4, #0
 8002964:	e003      	b.n	800296e <UART_SetConfig+0x6f6>
 8002966:	f04f 0301 	mov.w	r3, #1
 800296a:	f04f 0400 	mov.w	r4, #0
 800296e:	461a      	mov	r2, r3
 8002970:	4623      	mov	r3, r4
 8002972:	f7fd fc51 	bl	8000218 <__aeabi_uldivmod>
 8002976:	4603      	mov	r3, r0
 8002978:	460c      	mov	r4, r1
 800297a:	4619      	mov	r1, r3
 800297c:	4622      	mov	r2, r4
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	f04f 0400 	mov.w	r4, #0
 8002986:	0214      	lsls	r4, r2, #8
 8002988:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800298c:	020b      	lsls	r3, r1, #8
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6852      	ldr	r2, [r2, #4]
 8002992:	0852      	lsrs	r2, r2, #1
 8002994:	4611      	mov	r1, r2
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	eb13 0b01 	adds.w	fp, r3, r1
 800299e:	eb44 0c02 	adc.w	ip, r4, r2
 80029a2:	4658      	mov	r0, fp
 80029a4:	4661      	mov	r1, ip
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f04f 0400 	mov.w	r4, #0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4623      	mov	r3, r4
 80029b2:	f7fd fc31 	bl	8000218 <__aeabi_uldivmod>
 80029b6:	4603      	mov	r3, r0
 80029b8:	460c      	mov	r4, r1
 80029ba:	61fb      	str	r3, [r7, #28]
            break;
 80029bc:	e1c5      	b.n	8002d4a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d05b      	beq.n	8002a7e <UART_SetConfig+0x806>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d053      	beq.n	8002a76 <UART_SetConfig+0x7fe>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d04b      	beq.n	8002a6e <UART_SetConfig+0x7f6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d043      	beq.n	8002a66 <UART_SetConfig+0x7ee>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d03b      	beq.n	8002a5e <UART_SetConfig+0x7e6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b05      	cmp	r3, #5
 80029ec:	d033      	beq.n	8002a56 <UART_SetConfig+0x7de>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d02b      	beq.n	8002a4e <UART_SetConfig+0x7d6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2b07      	cmp	r3, #7
 80029fc:	d023      	beq.n	8002a46 <UART_SetConfig+0x7ce>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d01b      	beq.n	8002a3e <UART_SetConfig+0x7c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	d013      	beq.n	8002a36 <UART_SetConfig+0x7be>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	2b0a      	cmp	r3, #10
 8002a14:	d00b      	beq.n	8002a2e <UART_SetConfig+0x7b6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	2b0b      	cmp	r3, #11
 8002a1c:	d103      	bne.n	8002a26 <UART_SetConfig+0x7ae>
 8002a1e:	4bae      	ldr	r3, [pc, #696]	; (8002cd8 <UART_SetConfig+0xa60>)
 8002a20:	f04f 0400 	mov.w	r4, #0
 8002a24:	e02e      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a26:	4bad      	ldr	r3, [pc, #692]	; (8002cdc <UART_SetConfig+0xa64>)
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	e02a      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a2e:	4bac      	ldr	r3, [pc, #688]	; (8002ce0 <UART_SetConfig+0xa68>)
 8002a30:	f04f 0400 	mov.w	r4, #0
 8002a34:	e026      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a36:	4bab      	ldr	r3, [pc, #684]	; (8002ce4 <UART_SetConfig+0xa6c>)
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	e022      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a3e:	4baa      	ldr	r3, [pc, #680]	; (8002ce8 <UART_SetConfig+0xa70>)
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	e01e      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a46:	4ba9      	ldr	r3, [pc, #676]	; (8002cec <UART_SetConfig+0xa74>)
 8002a48:	f04f 0400 	mov.w	r4, #0
 8002a4c:	e01a      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a4e:	a49e      	add	r4, pc, #632	; (adr r4, 8002cc8 <UART_SetConfig+0xa50>)
 8002a50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002a54:	e016      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a56:	4ba6      	ldr	r3, [pc, #664]	; (8002cf0 <UART_SetConfig+0xa78>)
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	e012      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a5e:	4ba5      	ldr	r3, [pc, #660]	; (8002cf4 <UART_SetConfig+0xa7c>)
 8002a60:	f04f 0400 	mov.w	r4, #0
 8002a64:	e00e      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a66:	a49a      	add	r4, pc, #616	; (adr r4, 8002cd0 <UART_SetConfig+0xa58>)
 8002a68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002a6c:	e00a      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a6e:	4ba2      	ldr	r3, [pc, #648]	; (8002cf8 <UART_SetConfig+0xa80>)
 8002a70:	f04f 0400 	mov.w	r4, #0
 8002a74:	e006      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a76:	4ba1      	ldr	r3, [pc, #644]	; (8002cfc <UART_SetConfig+0xa84>)
 8002a78:	f04f 0400 	mov.w	r4, #0
 8002a7c:	e002      	b.n	8002a84 <UART_SetConfig+0x80c>
 8002a7e:	4b97      	ldr	r3, [pc, #604]	; (8002cdc <UART_SetConfig+0xa64>)
 8002a80:	f04f 0400 	mov.w	r4, #0
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6852      	ldr	r2, [r2, #4]
 8002a88:	0852      	lsrs	r2, r2, #1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	eb13 0b01 	adds.w	fp, r3, r1
 8002a94:	eb44 0c02 	adc.w	ip, r4, r2
 8002a98:	4658      	mov	r0, fp
 8002a9a:	4661      	mov	r1, ip
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	f7fd fbb6 	bl	8000218 <__aeabi_uldivmod>
 8002aac:	4603      	mov	r3, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	61fb      	str	r3, [r7, #28]
            break;
 8002ab2:	e14a      	b.n	8002d4a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002ab4:	f7fe ff7c 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002ab8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d067      	beq.n	8002b9a <UART_SetConfig+0x922>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d05e      	beq.n	8002b90 <UART_SetConfig+0x918>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d055      	beq.n	8002b86 <UART_SetConfig+0x90e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d04c      	beq.n	8002b7c <UART_SetConfig+0x904>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d043      	beq.n	8002b72 <UART_SetConfig+0x8fa>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d03a      	beq.n	8002b68 <UART_SetConfig+0x8f0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d031      	beq.n	8002b5e <UART_SetConfig+0x8e6>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b07      	cmp	r3, #7
 8002b00:	d028      	beq.n	8002b54 <UART_SetConfig+0x8dc>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d01f      	beq.n	8002b4a <UART_SetConfig+0x8d2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d016      	beq.n	8002b40 <UART_SetConfig+0x8c8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2b0a      	cmp	r3, #10
 8002b18:	d00d      	beq.n	8002b36 <UART_SetConfig+0x8be>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b0b      	cmp	r3, #11
 8002b20:	d104      	bne.n	8002b2c <UART_SetConfig+0x8b4>
 8002b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b26:	f04f 0400 	mov.w	r4, #0
 8002b2a:	e03a      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b2c:	f04f 0301 	mov.w	r3, #1
 8002b30:	f04f 0400 	mov.w	r4, #0
 8002b34:	e035      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b36:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	e030      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b40:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	e02b      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b4a:	f04f 0320 	mov.w	r3, #32
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	e026      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b54:	f04f 0310 	mov.w	r3, #16
 8002b58:	f04f 0400 	mov.w	r4, #0
 8002b5c:	e021      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b5e:	f04f 030c 	mov.w	r3, #12
 8002b62:	f04f 0400 	mov.w	r4, #0
 8002b66:	e01c      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b68:	f04f 030a 	mov.w	r3, #10
 8002b6c:	f04f 0400 	mov.w	r4, #0
 8002b70:	e017      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b72:	f04f 0308 	mov.w	r3, #8
 8002b76:	f04f 0400 	mov.w	r4, #0
 8002b7a:	e012      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b7c:	f04f 0306 	mov.w	r3, #6
 8002b80:	f04f 0400 	mov.w	r4, #0
 8002b84:	e00d      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b86:	f04f 0304 	mov.w	r3, #4
 8002b8a:	f04f 0400 	mov.w	r4, #0
 8002b8e:	e008      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b90:	f04f 0302 	mov.w	r3, #2
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	e003      	b.n	8002ba2 <UART_SetConfig+0x92a>
 8002b9a:	f04f 0301 	mov.w	r3, #1
 8002b9e:	f04f 0400 	mov.w	r4, #0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	f7fd fb37 	bl	8000218 <__aeabi_uldivmod>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	0214      	lsls	r4, r2, #8
 8002bbc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002bc0:	020b      	lsls	r3, r1, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6852      	ldr	r2, [r2, #4]
 8002bc6:	0852      	lsrs	r2, r2, #1
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	eb13 0b01 	adds.w	fp, r3, r1
 8002bd2:	eb44 0c02 	adc.w	ip, r4, r2
 8002bd6:	4658      	mov	r0, fp
 8002bd8:	4661      	mov	r1, ip
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f04f 0400 	mov.w	r4, #0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4623      	mov	r3, r4
 8002be6:	f7fd fb17 	bl	8000218 <__aeabi_uldivmod>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	61fb      	str	r3, [r7, #28]
            break;
 8002bf0:	e0ab      	b.n	8002d4a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8088 	beq.w	8002d0c <UART_SetConfig+0xa94>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d05b      	beq.n	8002cbc <UART_SetConfig+0xa44>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d052      	beq.n	8002cb2 <UART_SetConfig+0xa3a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d04a      	beq.n	8002caa <UART_SetConfig+0xa32>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d041      	beq.n	8002ca0 <UART_SetConfig+0xa28>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d039      	beq.n	8002c98 <UART_SetConfig+0xa20>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d031      	beq.n	8002c90 <UART_SetConfig+0xa18>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d028      	beq.n	8002c86 <UART_SetConfig+0xa0e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d01f      	beq.n	8002c7c <UART_SetConfig+0xa04>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	d016      	beq.n	8002c72 <UART_SetConfig+0x9fa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2b0a      	cmp	r3, #10
 8002c4a:	d00d      	beq.n	8002c68 <UART_SetConfig+0x9f0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b0b      	cmp	r3, #11
 8002c52:	d104      	bne.n	8002c5e <UART_SetConfig+0x9e6>
 8002c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	e05a      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002c62:	f04f 0400 	mov.w	r4, #0
 8002c66:	e055      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6c:	f04f 0400 	mov.w	r4, #0
 8002c70:	e050      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c76:	f04f 0400 	mov.w	r4, #0
 8002c7a:	e04b      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c80:	f04f 0400 	mov.w	r4, #0
 8002c84:	e046      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c8a:	f04f 0400 	mov.w	r4, #0
 8002c8e:	e041      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <UART_SetConfig+0xa88>)
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	e03d      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <UART_SetConfig+0xa8c>)
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	e039      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002ca0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ca4:	f04f 0400 	mov.w	r4, #0
 8002ca8:	e034      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <UART_SetConfig+0xa90>)
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	e030      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002cb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb6:	f04f 0400 	mov.w	r4, #0
 8002cba:	e02b      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002cbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	e026      	b.n	8002d14 <UART_SetConfig+0xa9c>
 8002cc6:	bf00      	nop
 8002cc8:	14585500 	.word	0x14585500
 8002ccc:	00000000 	.word	0x00000000
 8002cd0:	28b0aa00 	.word	0x28b0aa00
 8002cd4:	00000000 	.word	0x00000000
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	f4240000 	.word	0xf4240000
 8002ce0:	01e84800 	.word	0x01e84800
 8002ce4:	03d09000 	.word	0x03d09000
 8002ce8:	07a12000 	.word	0x07a12000
 8002cec:	0f424000 	.word	0x0f424000
 8002cf0:	186a0000 	.word	0x186a0000
 8002cf4:	1e848000 	.word	0x1e848000
 8002cf8:	3d090000 	.word	0x3d090000
 8002cfc:	7a120000 	.word	0x7a120000
 8002d00:	000aaa00 	.word	0x000aaa00
 8002d04:	000ccc00 	.word	0x000ccc00
 8002d08:	00155500 	.word	0x00155500
 8002d0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002d10:	f04f 0400 	mov.w	r4, #0
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6852      	ldr	r2, [r2, #4]
 8002d18:	0852      	lsrs	r2, r2, #1
 8002d1a:	4611      	mov	r1, r2
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	eb13 0b01 	adds.w	fp, r3, r1
 8002d24:	eb44 0c02 	adc.w	ip, r4, r2
 8002d28:	4658      	mov	r0, fp
 8002d2a:	4661      	mov	r1, ip
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	461a      	mov	r2, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	f7fd fa6e 	bl	8000218 <__aeabi_uldivmod>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	61fb      	str	r3, [r7, #28]
            break;
 8002d42:	e002      	b.n	8002d4a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	76fb      	strb	r3, [r7, #27]
            break;
 8002d48:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d50:	d309      	bcc.n	8002d66 <UART_SetConfig+0xaee>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d58:	d205      	bcs.n	8002d66 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	f000 bc18 	b.w	8003596 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	76fb      	strb	r3, [r7, #27]
 8002d6a:	f000 bc14 	b.w	8003596 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d76:	f040 8204 	bne.w	8003182 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8002d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	f200 81df 	bhi.w	8003142 <UART_SetConfig+0xeca>
 8002d84:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <UART_SetConfig+0xb14>)
 8002d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8a:	bf00      	nop
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002e69 	.word	0x08002e69
 8002d94:	08002f21 	.word	0x08002f21
 8002d98:	08003143 	.word	0x08003143
 8002d9c:	08002fc9 	.word	0x08002fc9
 8002da0:	08003143 	.word	0x08003143
 8002da4:	08003143 	.word	0x08003143
 8002da8:	08003143 	.word	0x08003143
 8002dac:	08003081 	.word	0x08003081
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db0:	f7fe fe6c 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 8002db4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d044      	beq.n	8002e48 <UART_SetConfig+0xbd0>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d03e      	beq.n	8002e44 <UART_SetConfig+0xbcc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d038      	beq.n	8002e40 <UART_SetConfig+0xbc8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d032      	beq.n	8002e3c <UART_SetConfig+0xbc4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d02c      	beq.n	8002e38 <UART_SetConfig+0xbc0>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d026      	beq.n	8002e34 <UART_SetConfig+0xbbc>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d020      	beq.n	8002e30 <UART_SetConfig+0xbb8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b07      	cmp	r3, #7
 8002df4:	d01a      	beq.n	8002e2c <UART_SetConfig+0xbb4>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d014      	beq.n	8002e28 <UART_SetConfig+0xbb0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b09      	cmp	r3, #9
 8002e04:	d00e      	beq.n	8002e24 <UART_SetConfig+0xbac>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b0a      	cmp	r3, #10
 8002e0c:	d008      	beq.n	8002e20 <UART_SetConfig+0xba8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b0b      	cmp	r3, #11
 8002e14:	d102      	bne.n	8002e1c <UART_SetConfig+0xba4>
 8002e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e1a:	e016      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e014      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	e012      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e24:	2340      	movs	r3, #64	; 0x40
 8002e26:	e010      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e28:	2320      	movs	r3, #32
 8002e2a:	e00e      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	e00c      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e30:	230c      	movs	r3, #12
 8002e32:	e00a      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e34:	230a      	movs	r3, #10
 8002e36:	e008      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e38:	2308      	movs	r3, #8
 8002e3a:	e006      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e3c:	2306      	movs	r3, #6
 8002e3e:	e004      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e40:	2304      	movs	r3, #4
 8002e42:	e002      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e000      	b.n	8002e4a <UART_SetConfig+0xbd2>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	005a      	lsls	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	441a      	add	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	61fb      	str	r3, [r7, #28]
        break;
 8002e66:	e16f      	b.n	8003148 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7fe fe26 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8002e6c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d044      	beq.n	8002f00 <UART_SetConfig+0xc88>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d03e      	beq.n	8002efc <UART_SetConfig+0xc84>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d038      	beq.n	8002ef8 <UART_SetConfig+0xc80>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d032      	beq.n	8002ef4 <UART_SetConfig+0xc7c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d02c      	beq.n	8002ef0 <UART_SetConfig+0xc78>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d026      	beq.n	8002eec <UART_SetConfig+0xc74>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d020      	beq.n	8002ee8 <UART_SetConfig+0xc70>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b07      	cmp	r3, #7
 8002eac:	d01a      	beq.n	8002ee4 <UART_SetConfig+0xc6c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d014      	beq.n	8002ee0 <UART_SetConfig+0xc68>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	d00e      	beq.n	8002edc <UART_SetConfig+0xc64>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	2b0a      	cmp	r3, #10
 8002ec4:	d008      	beq.n	8002ed8 <UART_SetConfig+0xc60>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b0b      	cmp	r3, #11
 8002ecc:	d102      	bne.n	8002ed4 <UART_SetConfig+0xc5c>
 8002ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed2:	e016      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e014      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	e012      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002edc:	2340      	movs	r3, #64	; 0x40
 8002ede:	e010      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e00e      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	e00c      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ee8:	230c      	movs	r3, #12
 8002eea:	e00a      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002eec:	230a      	movs	r3, #10
 8002eee:	e008      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	e006      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ef4:	2306      	movs	r3, #6
 8002ef6:	e004      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e002      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e000      	b.n	8002f02 <UART_SetConfig+0xc8a>
 8002f00:	2301      	movs	r3, #1
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	005a      	lsls	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	61fb      	str	r3, [r7, #28]
        break;
 8002f1e:	e113      	b.n	8003148 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d043      	beq.n	8002fb0 <UART_SetConfig+0xd38>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d03d      	beq.n	8002fac <UART_SetConfig+0xd34>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d037      	beq.n	8002fa8 <UART_SetConfig+0xd30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d031      	beq.n	8002fa4 <UART_SetConfig+0xd2c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d02b      	beq.n	8002fa0 <UART_SetConfig+0xd28>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d025      	beq.n	8002f9c <UART_SetConfig+0xd24>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d01f      	beq.n	8002f98 <UART_SetConfig+0xd20>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b07      	cmp	r3, #7
 8002f5e:	d019      	beq.n	8002f94 <UART_SetConfig+0xd1c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d013      	beq.n	8002f90 <UART_SetConfig+0xd18>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d00d      	beq.n	8002f8c <UART_SetConfig+0xd14>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b0a      	cmp	r3, #10
 8002f76:	d007      	beq.n	8002f88 <UART_SetConfig+0xd10>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b0b      	cmp	r3, #11
 8002f7e:	d101      	bne.n	8002f84 <UART_SetConfig+0xd0c>
 8002f80:	4b8d      	ldr	r3, [pc, #564]	; (80031b8 <UART_SetConfig+0xf40>)
 8002f82:	e016      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f84:	4b8d      	ldr	r3, [pc, #564]	; (80031bc <UART_SetConfig+0xf44>)
 8002f86:	e014      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f88:	4b8d      	ldr	r3, [pc, #564]	; (80031c0 <UART_SetConfig+0xf48>)
 8002f8a:	e012      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f8c:	4b8d      	ldr	r3, [pc, #564]	; (80031c4 <UART_SetConfig+0xf4c>)
 8002f8e:	e010      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f90:	4b8d      	ldr	r3, [pc, #564]	; (80031c8 <UART_SetConfig+0xf50>)
 8002f92:	e00e      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f94:	4b8d      	ldr	r3, [pc, #564]	; (80031cc <UART_SetConfig+0xf54>)
 8002f96:	e00c      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f98:	4b8d      	ldr	r3, [pc, #564]	; (80031d0 <UART_SetConfig+0xf58>)
 8002f9a:	e00a      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002f9c:	4b8d      	ldr	r3, [pc, #564]	; (80031d4 <UART_SetConfig+0xf5c>)
 8002f9e:	e008      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002fa0:	4b8d      	ldr	r3, [pc, #564]	; (80031d8 <UART_SetConfig+0xf60>)
 8002fa2:	e006      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002fa4:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <UART_SetConfig+0xf64>)
 8002fa6:	e004      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002fa8:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <UART_SetConfig+0xf68>)
 8002faa:	e002      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002fac:	4b8d      	ldr	r3, [pc, #564]	; (80031e4 <UART_SetConfig+0xf6c>)
 8002fae:	e000      	b.n	8002fb2 <UART_SetConfig+0xd3a>
 8002fb0:	4b82      	ldr	r3, [pc, #520]	; (80031bc <UART_SetConfig+0xf44>)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6852      	ldr	r2, [r2, #4]
 8002fb6:	0852      	lsrs	r2, r2, #1
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	61fb      	str	r3, [r7, #28]
        break;
 8002fc6:	e0bf      	b.n	8003148 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc8:	f7fe fcf2 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002fcc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <UART_SetConfig+0xde8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d03e      	beq.n	800305c <UART_SetConfig+0xde4>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d038      	beq.n	8003058 <UART_SetConfig+0xde0>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d032      	beq.n	8003054 <UART_SetConfig+0xddc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d02c      	beq.n	8003050 <UART_SetConfig+0xdd8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d026      	beq.n	800304c <UART_SetConfig+0xdd4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b06      	cmp	r3, #6
 8003004:	d020      	beq.n	8003048 <UART_SetConfig+0xdd0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b07      	cmp	r3, #7
 800300c:	d01a      	beq.n	8003044 <UART_SetConfig+0xdcc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b08      	cmp	r3, #8
 8003014:	d014      	beq.n	8003040 <UART_SetConfig+0xdc8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b09      	cmp	r3, #9
 800301c:	d00e      	beq.n	800303c <UART_SetConfig+0xdc4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	2b0a      	cmp	r3, #10
 8003024:	d008      	beq.n	8003038 <UART_SetConfig+0xdc0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	2b0b      	cmp	r3, #11
 800302c:	d102      	bne.n	8003034 <UART_SetConfig+0xdbc>
 800302e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003032:	e016      	b.n	8003062 <UART_SetConfig+0xdea>
 8003034:	2301      	movs	r3, #1
 8003036:	e014      	b.n	8003062 <UART_SetConfig+0xdea>
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	e012      	b.n	8003062 <UART_SetConfig+0xdea>
 800303c:	2340      	movs	r3, #64	; 0x40
 800303e:	e010      	b.n	8003062 <UART_SetConfig+0xdea>
 8003040:	2320      	movs	r3, #32
 8003042:	e00e      	b.n	8003062 <UART_SetConfig+0xdea>
 8003044:	2310      	movs	r3, #16
 8003046:	e00c      	b.n	8003062 <UART_SetConfig+0xdea>
 8003048:	230c      	movs	r3, #12
 800304a:	e00a      	b.n	8003062 <UART_SetConfig+0xdea>
 800304c:	230a      	movs	r3, #10
 800304e:	e008      	b.n	8003062 <UART_SetConfig+0xdea>
 8003050:	2308      	movs	r3, #8
 8003052:	e006      	b.n	8003062 <UART_SetConfig+0xdea>
 8003054:	2306      	movs	r3, #6
 8003056:	e004      	b.n	8003062 <UART_SetConfig+0xdea>
 8003058:	2304      	movs	r3, #4
 800305a:	e002      	b.n	8003062 <UART_SetConfig+0xdea>
 800305c:	2302      	movs	r3, #2
 800305e:	e000      	b.n	8003062 <UART_SetConfig+0xdea>
 8003060:	2301      	movs	r3, #1
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	005a      	lsls	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	61fb      	str	r3, [r7, #28]
        break;
 800307e:	e063      	b.n	8003148 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d04f      	beq.n	8003128 <UART_SetConfig+0xeb0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2b01      	cmp	r3, #1
 800308e:	d048      	beq.n	8003122 <UART_SetConfig+0xeaa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2b02      	cmp	r3, #2
 8003096:	d041      	beq.n	800311c <UART_SetConfig+0xea4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b03      	cmp	r3, #3
 800309e:	d03a      	beq.n	8003116 <UART_SetConfig+0xe9e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d033      	beq.n	8003110 <UART_SetConfig+0xe98>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d02c      	beq.n	800310a <UART_SetConfig+0xe92>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	d025      	beq.n	8003104 <UART_SetConfig+0xe8c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2b07      	cmp	r3, #7
 80030be:	d01e      	beq.n	80030fe <UART_SetConfig+0xe86>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d017      	beq.n	80030f8 <UART_SetConfig+0xe80>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b09      	cmp	r3, #9
 80030ce:	d010      	beq.n	80030f2 <UART_SetConfig+0xe7a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2b0a      	cmp	r3, #10
 80030d6:	d009      	beq.n	80030ec <UART_SetConfig+0xe74>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b0b      	cmp	r3, #11
 80030de:	d102      	bne.n	80030e6 <UART_SetConfig+0xe6e>
 80030e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e4:	e022      	b.n	800312c <UART_SetConfig+0xeb4>
 80030e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ea:	e01f      	b.n	800312c <UART_SetConfig+0xeb4>
 80030ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f0:	e01c      	b.n	800312c <UART_SetConfig+0xeb4>
 80030f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f6:	e019      	b.n	800312c <UART_SetConfig+0xeb4>
 80030f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030fc:	e016      	b.n	800312c <UART_SetConfig+0xeb4>
 80030fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003102:	e013      	b.n	800312c <UART_SetConfig+0xeb4>
 8003104:	f241 5354 	movw	r3, #5460	; 0x1554
 8003108:	e010      	b.n	800312c <UART_SetConfig+0xeb4>
 800310a:	f641 1398 	movw	r3, #6552	; 0x1998
 800310e:	e00d      	b.n	800312c <UART_SetConfig+0xeb4>
 8003110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003114:	e00a      	b.n	800312c <UART_SetConfig+0xeb4>
 8003116:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800311a:	e007      	b.n	800312c <UART_SetConfig+0xeb4>
 800311c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003120:	e004      	b.n	800312c <UART_SetConfig+0xeb4>
 8003122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003126:	e001      	b.n	800312c <UART_SetConfig+0xeb4>
 8003128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	0852      	lsrs	r2, r2, #1
 8003132:	441a      	add	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	b29b      	uxth	r3, r3
 800313e:	61fb      	str	r3, [r7, #28]
        break;
 8003140:	e002      	b.n	8003148 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	76fb      	strb	r3, [r7, #27]
        break;
 8003146:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	d916      	bls.n	800317c <UART_SetConfig+0xf04>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003154:	d212      	bcs.n	800317c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f023 030f 	bic.w	r3, r3, #15
 800315e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	b29b      	uxth	r3, r3
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	b29a      	uxth	r2, r3
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	4313      	orrs	r3, r2
 8003170:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	89fa      	ldrh	r2, [r7, #14]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e20c      	b.n	8003596 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	76fb      	strb	r3, [r7, #27]
 8003180:	e209      	b.n	8003596 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8003182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003186:	2b08      	cmp	r3, #8
 8003188:	f200 81f4 	bhi.w	8003574 <UART_SetConfig+0x12fc>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <UART_SetConfig+0xf1c>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031e9 	.word	0x080031e9
 8003198:	0800329f 	.word	0x0800329f
 800319c:	08003355 	.word	0x08003355
 80031a0:	08003575 	.word	0x08003575
 80031a4:	080033ff 	.word	0x080033ff
 80031a8:	08003575 	.word	0x08003575
 80031ac:	08003575 	.word	0x08003575
 80031b0:	08003575 	.word	0x08003575
 80031b4:	080034b5 	.word	0x080034b5
 80031b8:	0001e848 	.word	0x0001e848
 80031bc:	01e84800 	.word	0x01e84800
 80031c0:	0003d090 	.word	0x0003d090
 80031c4:	0007a120 	.word	0x0007a120
 80031c8:	000f4240 	.word	0x000f4240
 80031cc:	001e8480 	.word	0x001e8480
 80031d0:	0028b0aa 	.word	0x0028b0aa
 80031d4:	0030d400 	.word	0x0030d400
 80031d8:	003d0900 	.word	0x003d0900
 80031dc:	00516154 	.word	0x00516154
 80031e0:	007a1200 	.word	0x007a1200
 80031e4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e8:	f7fe fc50 	bl	8001a8c <HAL_RCC_GetPCLK1Freq>
 80031ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d044      	beq.n	8003280 <UART_SetConfig+0x1008>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d03e      	beq.n	800327c <UART_SetConfig+0x1004>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b02      	cmp	r3, #2
 8003204:	d038      	beq.n	8003278 <UART_SetConfig+0x1000>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b03      	cmp	r3, #3
 800320c:	d032      	beq.n	8003274 <UART_SetConfig+0xffc>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b04      	cmp	r3, #4
 8003214:	d02c      	beq.n	8003270 <UART_SetConfig+0xff8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b05      	cmp	r3, #5
 800321c:	d026      	beq.n	800326c <UART_SetConfig+0xff4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b06      	cmp	r3, #6
 8003224:	d020      	beq.n	8003268 <UART_SetConfig+0xff0>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b07      	cmp	r3, #7
 800322c:	d01a      	beq.n	8003264 <UART_SetConfig+0xfec>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b08      	cmp	r3, #8
 8003234:	d014      	beq.n	8003260 <UART_SetConfig+0xfe8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b09      	cmp	r3, #9
 800323c:	d00e      	beq.n	800325c <UART_SetConfig+0xfe4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d008      	beq.n	8003258 <UART_SetConfig+0xfe0>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b0b      	cmp	r3, #11
 800324c:	d102      	bne.n	8003254 <UART_SetConfig+0xfdc>
 800324e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003252:	e016      	b.n	8003282 <UART_SetConfig+0x100a>
 8003254:	2301      	movs	r3, #1
 8003256:	e014      	b.n	8003282 <UART_SetConfig+0x100a>
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	e012      	b.n	8003282 <UART_SetConfig+0x100a>
 800325c:	2340      	movs	r3, #64	; 0x40
 800325e:	e010      	b.n	8003282 <UART_SetConfig+0x100a>
 8003260:	2320      	movs	r3, #32
 8003262:	e00e      	b.n	8003282 <UART_SetConfig+0x100a>
 8003264:	2310      	movs	r3, #16
 8003266:	e00c      	b.n	8003282 <UART_SetConfig+0x100a>
 8003268:	230c      	movs	r3, #12
 800326a:	e00a      	b.n	8003282 <UART_SetConfig+0x100a>
 800326c:	230a      	movs	r3, #10
 800326e:	e008      	b.n	8003282 <UART_SetConfig+0x100a>
 8003270:	2308      	movs	r3, #8
 8003272:	e006      	b.n	8003282 <UART_SetConfig+0x100a>
 8003274:	2306      	movs	r3, #6
 8003276:	e004      	b.n	8003282 <UART_SetConfig+0x100a>
 8003278:	2304      	movs	r3, #4
 800327a:	e002      	b.n	8003282 <UART_SetConfig+0x100a>
 800327c:	2302      	movs	r3, #2
 800327e:	e000      	b.n	8003282 <UART_SetConfig+0x100a>
 8003280:	2301      	movs	r3, #1
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	b29b      	uxth	r3, r3
 800329a:	61fb      	str	r3, [r7, #28]
        break;
 800329c:	e16d      	b.n	800357a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800329e:	f7fe fc0b 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 80032a2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d044      	beq.n	8003336 <UART_SetConfig+0x10be>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d03e      	beq.n	8003332 <UART_SetConfig+0x10ba>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d038      	beq.n	800332e <UART_SetConfig+0x10b6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d032      	beq.n	800332a <UART_SetConfig+0x10b2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d02c      	beq.n	8003326 <UART_SetConfig+0x10ae>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d026      	beq.n	8003322 <UART_SetConfig+0x10aa>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d020      	beq.n	800331e <UART_SetConfig+0x10a6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d01a      	beq.n	800331a <UART_SetConfig+0x10a2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d014      	beq.n	8003316 <UART_SetConfig+0x109e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d00e      	beq.n	8003312 <UART_SetConfig+0x109a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2b0a      	cmp	r3, #10
 80032fa:	d008      	beq.n	800330e <UART_SetConfig+0x1096>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	2b0b      	cmp	r3, #11
 8003302:	d102      	bne.n	800330a <UART_SetConfig+0x1092>
 8003304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003308:	e016      	b.n	8003338 <UART_SetConfig+0x10c0>
 800330a:	2301      	movs	r3, #1
 800330c:	e014      	b.n	8003338 <UART_SetConfig+0x10c0>
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	e012      	b.n	8003338 <UART_SetConfig+0x10c0>
 8003312:	2340      	movs	r3, #64	; 0x40
 8003314:	e010      	b.n	8003338 <UART_SetConfig+0x10c0>
 8003316:	2320      	movs	r3, #32
 8003318:	e00e      	b.n	8003338 <UART_SetConfig+0x10c0>
 800331a:	2310      	movs	r3, #16
 800331c:	e00c      	b.n	8003338 <UART_SetConfig+0x10c0>
 800331e:	230c      	movs	r3, #12
 8003320:	e00a      	b.n	8003338 <UART_SetConfig+0x10c0>
 8003322:	230a      	movs	r3, #10
 8003324:	e008      	b.n	8003338 <UART_SetConfig+0x10c0>
 8003326:	2308      	movs	r3, #8
 8003328:	e006      	b.n	8003338 <UART_SetConfig+0x10c0>
 800332a:	2306      	movs	r3, #6
 800332c:	e004      	b.n	8003338 <UART_SetConfig+0x10c0>
 800332e:	2304      	movs	r3, #4
 8003330:	e002      	b.n	8003338 <UART_SetConfig+0x10c0>
 8003332:	2302      	movs	r3, #2
 8003334:	e000      	b.n	8003338 <UART_SetConfig+0x10c0>
 8003336:	2301      	movs	r3, #1
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	fbb2 f2f3 	udiv	r2, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	61fb      	str	r3, [r7, #28]
        break;
 8003352:	e112      	b.n	800357a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d044      	beq.n	80033e6 <UART_SetConfig+0x116e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b01      	cmp	r3, #1
 8003362:	d03e      	beq.n	80033e2 <UART_SetConfig+0x116a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b02      	cmp	r3, #2
 800336a:	d038      	beq.n	80033de <UART_SetConfig+0x1166>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	2b03      	cmp	r3, #3
 8003372:	d032      	beq.n	80033da <UART_SetConfig+0x1162>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b04      	cmp	r3, #4
 800337a:	d02c      	beq.n	80033d6 <UART_SetConfig+0x115e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b05      	cmp	r3, #5
 8003382:	d026      	beq.n	80033d2 <UART_SetConfig+0x115a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2b06      	cmp	r3, #6
 800338a:	d020      	beq.n	80033ce <UART_SetConfig+0x1156>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2b07      	cmp	r3, #7
 8003392:	d01a      	beq.n	80033ca <UART_SetConfig+0x1152>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b08      	cmp	r3, #8
 800339a:	d014      	beq.n	80033c6 <UART_SetConfig+0x114e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	d00e      	beq.n	80033c2 <UART_SetConfig+0x114a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2b0a      	cmp	r3, #10
 80033aa:	d008      	beq.n	80033be <UART_SetConfig+0x1146>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b0b      	cmp	r3, #11
 80033b2:	d102      	bne.n	80033ba <UART_SetConfig+0x1142>
 80033b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80033b8:	e016      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033ba:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <UART_SetConfig+0x1348>)
 80033bc:	e014      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033be:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <UART_SetConfig+0x134c>)
 80033c0:	e012      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033c2:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <UART_SetConfig+0x1350>)
 80033c4:	e010      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033c6:	4b81      	ldr	r3, [pc, #516]	; (80035cc <UART_SetConfig+0x1354>)
 80033c8:	e00e      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033ca:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <UART_SetConfig+0x1358>)
 80033cc:	e00c      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033ce:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <UART_SetConfig+0x135c>)
 80033d0:	e00a      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033d2:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <UART_SetConfig+0x1360>)
 80033d4:	e008      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033d6:	4b81      	ldr	r3, [pc, #516]	; (80035dc <UART_SetConfig+0x1364>)
 80033d8:	e006      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033da:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <UART_SetConfig+0x1368>)
 80033dc:	e004      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033de:	4b81      	ldr	r3, [pc, #516]	; (80035e4 <UART_SetConfig+0x136c>)
 80033e0:	e002      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033e2:	4b81      	ldr	r3, [pc, #516]	; (80035e8 <UART_SetConfig+0x1370>)
 80033e4:	e000      	b.n	80033e8 <UART_SetConfig+0x1170>
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <UART_SetConfig+0x1348>)
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6852      	ldr	r2, [r2, #4]
 80033ec:	0852      	lsrs	r2, r2, #1
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	61fb      	str	r3, [r7, #28]
        break;
 80033fc:	e0bd      	b.n	800357a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7fe fad7 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8003402:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b00      	cmp	r3, #0
 800340a:	d044      	beq.n	8003496 <UART_SetConfig+0x121e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b01      	cmp	r3, #1
 8003412:	d03e      	beq.n	8003492 <UART_SetConfig+0x121a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b02      	cmp	r3, #2
 800341a:	d038      	beq.n	800348e <UART_SetConfig+0x1216>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b03      	cmp	r3, #3
 8003422:	d032      	beq.n	800348a <UART_SetConfig+0x1212>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2b04      	cmp	r3, #4
 800342a:	d02c      	beq.n	8003486 <UART_SetConfig+0x120e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b05      	cmp	r3, #5
 8003432:	d026      	beq.n	8003482 <UART_SetConfig+0x120a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b06      	cmp	r3, #6
 800343a:	d020      	beq.n	800347e <UART_SetConfig+0x1206>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b07      	cmp	r3, #7
 8003442:	d01a      	beq.n	800347a <UART_SetConfig+0x1202>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b08      	cmp	r3, #8
 800344a:	d014      	beq.n	8003476 <UART_SetConfig+0x11fe>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b09      	cmp	r3, #9
 8003452:	d00e      	beq.n	8003472 <UART_SetConfig+0x11fa>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b0a      	cmp	r3, #10
 800345a:	d008      	beq.n	800346e <UART_SetConfig+0x11f6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2b0b      	cmp	r3, #11
 8003462:	d102      	bne.n	800346a <UART_SetConfig+0x11f2>
 8003464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003468:	e016      	b.n	8003498 <UART_SetConfig+0x1220>
 800346a:	2301      	movs	r3, #1
 800346c:	e014      	b.n	8003498 <UART_SetConfig+0x1220>
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	e012      	b.n	8003498 <UART_SetConfig+0x1220>
 8003472:	2340      	movs	r3, #64	; 0x40
 8003474:	e010      	b.n	8003498 <UART_SetConfig+0x1220>
 8003476:	2320      	movs	r3, #32
 8003478:	e00e      	b.n	8003498 <UART_SetConfig+0x1220>
 800347a:	2310      	movs	r3, #16
 800347c:	e00c      	b.n	8003498 <UART_SetConfig+0x1220>
 800347e:	230c      	movs	r3, #12
 8003480:	e00a      	b.n	8003498 <UART_SetConfig+0x1220>
 8003482:	230a      	movs	r3, #10
 8003484:	e008      	b.n	8003498 <UART_SetConfig+0x1220>
 8003486:	2308      	movs	r3, #8
 8003488:	e006      	b.n	8003498 <UART_SetConfig+0x1220>
 800348a:	2306      	movs	r3, #6
 800348c:	e004      	b.n	8003498 <UART_SetConfig+0x1220>
 800348e:	2304      	movs	r3, #4
 8003490:	e002      	b.n	8003498 <UART_SetConfig+0x1220>
 8003492:	2302      	movs	r3, #2
 8003494:	e000      	b.n	8003498 <UART_SetConfig+0x1220>
 8003496:	2301      	movs	r3, #1
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	fbb2 f2f3 	udiv	r2, r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	61fb      	str	r3, [r7, #28]
        break;
 80034b2:	e062      	b.n	800357a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d04e      	beq.n	800355a <UART_SetConfig+0x12e2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d047      	beq.n	8003554 <UART_SetConfig+0x12dc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d040      	beq.n	800354e <UART_SetConfig+0x12d6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d039      	beq.n	8003548 <UART_SetConfig+0x12d0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d032      	beq.n	8003542 <UART_SetConfig+0x12ca>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d02b      	beq.n	800353c <UART_SetConfig+0x12c4>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d024      	beq.n	8003536 <UART_SetConfig+0x12be>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2b07      	cmp	r3, #7
 80034f2:	d01d      	beq.n	8003530 <UART_SetConfig+0x12b8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d016      	beq.n	800352a <UART_SetConfig+0x12b2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b09      	cmp	r3, #9
 8003502:	d00f      	beq.n	8003524 <UART_SetConfig+0x12ac>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b0a      	cmp	r3, #10
 800350a:	d008      	beq.n	800351e <UART_SetConfig+0x12a6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b0b      	cmp	r3, #11
 8003512:	d101      	bne.n	8003518 <UART_SetConfig+0x12a0>
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	e022      	b.n	800355e <UART_SetConfig+0x12e6>
 8003518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351c:	e01f      	b.n	800355e <UART_SetConfig+0x12e6>
 800351e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003522:	e01c      	b.n	800355e <UART_SetConfig+0x12e6>
 8003524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003528:	e019      	b.n	800355e <UART_SetConfig+0x12e6>
 800352a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352e:	e016      	b.n	800355e <UART_SetConfig+0x12e6>
 8003530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003534:	e013      	b.n	800355e <UART_SetConfig+0x12e6>
 8003536:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800353a:	e010      	b.n	800355e <UART_SetConfig+0x12e6>
 800353c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003540:	e00d      	b.n	800355e <UART_SetConfig+0x12e6>
 8003542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003546:	e00a      	b.n	800355e <UART_SetConfig+0x12e6>
 8003548:	f241 5355 	movw	r3, #5461	; 0x1555
 800354c:	e007      	b.n	800355e <UART_SetConfig+0x12e6>
 800354e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003552:	e004      	b.n	800355e <UART_SetConfig+0x12e6>
 8003554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003558:	e001      	b.n	800355e <UART_SetConfig+0x12e6>
 800355a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6852      	ldr	r2, [r2, #4]
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	61fb      	str	r3, [r7, #28]
        break;
 8003572:	e002      	b.n	800357a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	76fb      	strb	r3, [r7, #27]
        break;
 8003578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	d908      	bls.n	8003592 <UART_SetConfig+0x131a>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d204      	bcs.n	8003592 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	e001      	b.n	8003596 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80035b2:	7efb      	ldrb	r3, [r7, #27]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80035be:	bf00      	nop
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	0001e848 	.word	0x0001e848
 80035c8:	0003d090 	.word	0x0003d090
 80035cc:	0007a120 	.word	0x0007a120
 80035d0:	000f4240 	.word	0x000f4240
 80035d4:	00145855 	.word	0x00145855
 80035d8:	00186a00 	.word	0x00186a00
 80035dc:	001e8480 	.word	0x001e8480
 80035e0:	0028b0aa 	.word	0x0028b0aa
 80035e4:	003d0900 	.word	0x003d0900
 80035e8:	007a1200 	.word	0x007a1200

080035ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01a      	beq.n	8003702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ea:	d10a      	bne.n	8003702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003740:	f7fc ff4e 	bl	80005e0 <HAL_GetTick>
 8003744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10e      	bne.n	8003772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f82c 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e022      	b.n	80037b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d10e      	bne.n	800379e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f816 	bl	80037c0 <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e00c      	b.n	80037b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	e02c      	b.n	800382c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d8:	d028      	beq.n	800382c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037da:	f7fc ff01 	bl	80005e0 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d302      	bcc.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11d      	bne.n	800382c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e00f      	b.n	800384c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	429a      	cmp	r2, r3
 8003848:	d0c3      	beq.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_UARTEx_DisableFifoMode+0x16>
 8003866:	2302      	movs	r3, #2
 8003868:	e027      	b.n	80038ba <HAL_UARTEx_DisableFifoMode+0x66>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038da:	2302      	movs	r3, #2
 80038dc:	e02d      	b.n	800393a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2224      	movs	r2, #36	; 0x24
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f850 	bl	80039c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003956:	2302      	movs	r3, #2
 8003958:	e02d      	b.n	80039b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2224      	movs	r2, #36	; 0x24
 8003966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f812 	bl	80039c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80039c8:	4a2f      	ldr	r2, [pc, #188]	; (8003a88 <UARTEx_SetNbDataToProcess+0xc8>)
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80039d6:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <UARTEx_SetNbDataToProcess+0xcc>)
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039e0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039fc:	e03d      	b.n	8003a7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039fe:	2308      	movs	r3, #8
 8003a00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a02:	2308      	movs	r3, #8
 8003a04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	0e5b      	lsrs	r3, r3, #25
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	0f5b      	lsrs	r3, r3, #29
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003a26:	7fbb      	ldrb	r3, [r7, #30]
 8003a28:	7f3a      	ldrb	r2, [r7, #28]
 8003a2a:	f107 0120 	add.w	r1, r7, #32
 8003a2e:	440a      	add	r2, r1
 8003a30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	7f3a      	ldrb	r2, [r7, #28]
 8003a3a:	f107 0120 	add.w	r1, r7, #32
 8003a3e:	440a      	add	r2, r1
 8003a40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003a50:	7ffb      	ldrb	r3, [r7, #31]
 8003a52:	7f7a      	ldrb	r2, [r7, #29]
 8003a54:	f107 0120 	add.w	r1, r7, #32
 8003a58:	440a      	add	r2, r1
 8003a5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	7f7a      	ldrb	r2, [r7, #29]
 8003a64:	f107 0120 	add.w	r1, r7, #32
 8003a68:	440a      	add	r2, r1
 8003a6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a7a:	bf00      	nop
 8003a7c:	3724      	adds	r7, #36	; 0x24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	08004220 	.word	0x08004220
 8003a8c:	08004228 	.word	0x08004228

08003a90 <_ZN15DMAParallelPortC1EPtjR12GPIO_TypeDefR16GPIO_InitTypeDefR17TIM_HandleTypeDefR19__DMA_HandleTypeDef>:
 *
 ****************************************************************************/

#include <DMAParallelPort.hpp>

DMAParallelPort::DMAParallelPort(
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
		    buffer(buffer),
			bufferLength(bufferLength),
            port(port),
            pin_config(pin_config),
            timer_handle(timer_handle),
            timer_dma_update_handle(timer_dma_update_handle)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	f103 040c 	add.w	r4, r3, #12
 8003ab8:	4615      	mov	r5, r2
 8003aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	621a      	str	r2, [r3, #32]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24
{
    if ((GPIO_PIN_MASK & pin_config.Pin) == 0)
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <_ZN15DMAParallelPortC1EPtjR12GPIO_TypeDefR16GPIO_InitTypeDefR17TIM_HandleTypeDefR19__DMA_HandleTypeDef+0x80>
        return;
    }

    // TODO make sure clock for gpio port was initialized

    HAL_GPIO_Init(&port, &pin_config);
 8003ad8:	6a39      	ldr	r1, [r7, #32]
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f7fd f8d6 	bl	8000c8c <HAL_GPIO_Init>

    MX_DMA_Init();
 8003ae0:	f000 f882 	bl	8003be8 <MX_DMA_Init>
    MX_TIM6_Init();
 8003ae4:	f000 fa26 	bl	8003f34 <MX_TIM6_Init>

    HAL_DMA_Start(
 8003ae8:	68b9      	ldr	r1, [r7, #8]
            &timer_dma_update_handle,
            (uint32_t) buffer,
            (uint32_t) &(port.ODR),
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	3314      	adds	r3, #20
    HAL_DMA_Start(
 8003aee:	461a      	mov	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af4:	f7fc ff38 	bl	8000968 <HAL_DMA_Start>
            bufferLength);
    HAL_TIM_Base_Start(&timer_handle);
 8003af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003afa:	f7fe fa55 	bl	8001fa8 <HAL_TIM_Base_Start>
    __HAL_TIM_ENABLE_DMA(&timer_handle, TIM_DMA_UPDATE);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	e000      	b.n	8003b12 <_ZN15DMAParallelPortC1EPtjR12GPIO_TypeDefR16GPIO_InitTypeDefR17TIM_HandleTypeDefR19__DMA_HandleTypeDef+0x82>
        return;
 8003b10:	bf00      	nop
}
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bdb0      	pop	{r4, r5, r7, pc}

08003b1c <app_main>:
int app_main();
}

#define BUFFERLENGTH 100

int app_main() {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b0c8      	sub	sp, #288	; 0x120
 8003b20:	af04      	add	r7, sp, #16
	uint16_t buffer[BUFFERLENGTH];
	// This buffer will be written to the output port, one element at the time, at the frequency of the trigger timer
	for (int i = 0; i < BUFFERLENGTH / 2; i++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2c:	2b31      	cmp	r3, #49	; 0x31
 8003b2e:	dc0f      	bgt.n	8003b50 <app_main+0x34>
		buffer[i] = 0xff00;
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003b40:	f823 2cd0 	strh.w	r2, [r3, #-208]
	for (int i = 0; i < BUFFERLENGTH / 2; i++) {
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b4e:	e7eb      	b.n	8003b28 <app_main+0xc>
	}
	for (int i = BUFFERLENGTH / 2; i < BUFFERLENGTH; i++) {
 8003b50:	2332      	movs	r3, #50	; 0x32
 8003b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b5a:	2b63      	cmp	r3, #99	; 0x63
 8003b5c:	dc0e      	bgt.n	8003b7c <app_main+0x60>
		buffer[i] = 0x00ff;
 8003b5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003b68:	4413      	add	r3, r2
 8003b6a:	22ff      	movs	r2, #255	; 0xff
 8003b6c:	f823 2cd0 	strh.w	r2, [r3, #-208]
	for (int i = BUFFERLENGTH / 2; i < BUFFERLENGTH; i++) {
 8003b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b74:	3301      	adds	r3, #1
 8003b76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b7a:	e7ec      	b.n	8003b56 <app_main+0x3a>
	}

	// Important: Enable the port clock for the output port manually
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <app_main+0xbc>)
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <app_main+0xbc>)
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <app_main+0xbc>)
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8c:	f003 0202 	and.w	r2, r3, #2
 8003b90:	463b      	mov	r3, r7
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	463b      	mov	r3, r7
 8003b96:	681b      	ldr	r3, [r3, #0]
	GPIO_InitTypeDef init = { 0 };
 8003b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
	init.Pin = GPIO_PIN_All;
 8003ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	init.Mode = GPIO_MODE_OUTPUT_PP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
	init.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
	init.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
			&buffer[0],
			BUFFERLENGTH,
			*GPIOB,
			init,
			htim6,
			hdma_tim6_up);
 8003bba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003bbe:	1d38      	adds	r0, r7, #4
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <app_main+0xc0>)
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <app_main+0xc4>)
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <app_main+0xc8>)
 8003bd0:	2264      	movs	r2, #100	; 0x64
 8003bd2:	f7ff ff5d 	bl	8003a90 <_ZN15DMAParallelPortC1EPtjR12GPIO_TypeDefR16GPIO_InitTypeDefR17TIM_HandleTypeDefR19__DMA_HandleTypeDef>

	while (1) { }
 8003bd6:	e7fe      	b.n	8003bd6 <app_main+0xba>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	2000002c 	.word	0x2000002c
 8003be0:	2000008c 	.word	0x2000008c
 8003be4:	48000400 	.word	0x48000400

08003be8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <MX_DMA_Init+0x50>)
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <MX_DMA_Init+0x50>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <MX_DMA_Init+0x50>)
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <MX_DMA_Init+0x50>)
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <MX_DMA_Init+0x50>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6493      	str	r3, [r2, #72]	; 0x48
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <MX_DMA_Init+0x50>)
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	200b      	movs	r0, #11
 8003c24:	f7fc fdc3 	bl	80007ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003c28:	200b      	movs	r0, #11
 8003c2a:	f7fc fdda 	bl	80007e2 <HAL_NVIC_EnableIRQ>

}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000

08003c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c70:	f043 0320 	orr.w	r3, r3, #32
 8003c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9a:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <MX_GPIO_Init+0xec>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cba:	f7fd f969 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cc4:	4819      	ldr	r0, [pc, #100]	; (8003d2c <MX_GPIO_Init+0xf0>)
 8003cc6:	f7fd f963 	bl	8000f90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <MX_GPIO_Init+0xf4>)
 8003cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4815      	ldr	r0, [pc, #84]	; (8003d34 <MX_GPIO_Init+0xf8>)
 8003ce0:	f7fc ffd4 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cfe:	f7fc ffc5 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4804      	ldr	r0, [pc, #16]	; (8003d2c <MX_GPIO_Init+0xf0>)
 8003d1c:	f7fc ffb6 	bl	8000c8c <HAL_GPIO_Init>

}
 8003d20:	bf00      	nop
 8003d22:	3728      	adds	r7, #40	; 0x28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	48000400 	.word	0x48000400
 8003d30:	10110000 	.word	0x10110000
 8003d34:	48000800 	.word	0x48000800

08003d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d3c:	f7fc fbec 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d40:	f000 f80b 	bl	8003d5a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  app_main();
 8003d44:	f7ff feea 	bl	8003b1c <app_main>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d48:	f7ff ff78 	bl	8003c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8003d4c:	f7ff ff4c 	bl	8003be8 <MX_DMA_Init>
  MX_TIM6_Init();
 8003d50:	f000 f8f0 	bl	8003f34 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8003d54:	f000 f972 	bl	800403c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d58:	e7fe      	b.n	8003d58 <main+0x20>

08003d5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b0a4      	sub	sp, #144	; 0x90
 8003d5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d64:	2238      	movs	r2, #56	; 0x38
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa45 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d7e:	463b      	mov	r3, r7
 8003d80:	2244      	movs	r2, #68	; 0x44
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fa37 	bl	80041f8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7fd f918 	bl	8000fc0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d90:	2302      	movs	r3, #2
 8003d92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003da2:	2302      	movs	r3, #2
 8003da4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003da6:	2304      	movs	r3, #4
 8003da8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003daa:	2355      	movs	r3, #85	; 0x55
 8003dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003db0:	2302      	movs	r3, #2
 8003db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003db6:	2302      	movs	r3, #2
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dc2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd f99e 	bl	8001108 <HAL_RCC_OscConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003dd2:	f000 f826 	bl	8003e22 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dd6:	230f      	movs	r3, #15
 8003dd8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003de2:	2300      	movs	r3, #0
 8003de4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003de6:	2300      	movs	r3, #0
 8003de8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8003dea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dee:	2108      	movs	r1, #8
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd fca1 	bl	8001738 <HAL_RCC_ClockConfig>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003dfc:	f000 f811 	bl	8003e22 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e00:	2301      	movs	r3, #1
 8003e02:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e04:	2300      	movs	r3, #0
 8003e06:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e08:	463b      	mov	r3, r7
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd feb0 	bl	8001b70 <HAL_RCCEx_PeriphCLKConfig>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003e16:	f000 f804 	bl	8003e22 <Error_Handler>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3790      	adds	r7, #144	; 0x90
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8003e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3e:	6093      	str	r3, [r2, #8]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40007000 	.word	0x40007000

08003e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_MspInit+0x44>)
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_MspInit+0x44>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6613      	str	r3, [r2, #96]	; 0x60
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <HAL_MspInit+0x44>)
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	607b      	str	r3, [r7, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_MspInit+0x44>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_MspInit+0x44>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_MspInit+0x44>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8003e86:	f7ff ffd3 	bl	8003e30 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eaa:	e7fe      	b.n	8003eaa <HardFault_Handler+0x4>

08003eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <MemManage_Handler+0x4>

08003eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eb6:	e7fe      	b.n	8003eb6 <BusFault_Handler+0x4>

08003eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ebc:	e7fe      	b.n	8003ebc <UsageFault_Handler+0x4>

08003ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eec:	f7fc fb66 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <DMA1_Channel1_IRQHandler+0x10>)
 8003efa:	f7fc fd78 	bl	80009ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	2000002c 	.word	0x2000002c

08003f08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <SystemInit+0x28>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <SystemInit+0x28>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <SystemInit+0x28>)
 8003f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f22:	609a      	str	r2, [r3, #8]
#endif
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8003f44:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <MX_TIM6_Init+0x6c>)
 8003f48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 299;
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f4c:	f240 122b 	movw	r2, #299	; 0x12b
 8003f50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 399;
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f5a:	f240 128f 	movw	r2, #399	; 0x18f
 8003f5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f66:	480d      	ldr	r0, [pc, #52]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f68:	f7fd fff2 	bl	8001f50 <HAL_TIM_Base_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003f72:	f7ff ff56 	bl	8003e22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4806      	ldr	r0, [pc, #24]	; (8003f9c <MX_TIM6_Init+0x68>)
 8003f84:	f7fe f8ca 	bl	800211c <HAL_TIMEx_MasterConfigSynchronization>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003f8e:	f7ff ff48 	bl	8003e22 <Error_Handler>
  }

}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000008c 	.word	0x2000008c
 8003fa0:	40001000 	.word	0x40001000

08003fa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_TIM_Base_MspInit+0x88>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d136      	bne.n	8004024 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_TIM_Base_MspInit+0x8c>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <HAL_TIM_Base_MspInit+0x8c>)
 8003fbc:	f043 0310 	orr.w	r3, r3, #16
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_TIM_Base_MspInit+0x8c>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA1_Channel1;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003fd0:	4a19      	ldr	r2, [pc, #100]	; (8004038 <HAL_TIM_Base_MspInit+0x94>)
 8003fd2:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Request = DMA_REQUEST_TIM6_UP;
 8003fd4:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fda:	4b16      	ldr	r3, [pc, #88]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003fdc:	2210      	movs	r2, #16
 8003fde:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff2:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ffa:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_CIRCULAR;
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8003ffe:	2220      	movs	r2, #32
 8004000:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8004008:	480a      	ldr	r0, [pc, #40]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 800400a:	f7fc fc05 	bl	8000818 <HAL_DMA_Init>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8004014:	f7ff ff05 	bl	8003e22 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a06      	ldr	r2, [pc, #24]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 800401c:	621a      	str	r2, [r3, #32]
 800401e:	4a05      	ldr	r2, [pc, #20]	; (8004034 <HAL_TIM_Base_MspInit+0x90>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40001000 	.word	0x40001000
 8004030:	40021000 	.word	0x40021000
 8004034:	2000002c 	.word	0x2000002c
 8004038:	40020008 	.word	0x40020008

0800403c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004042:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <MX_USART1_UART_Init+0x94>)
 8004044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800404c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <MX_USART1_UART_Init+0x90>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004062:	220c      	movs	r2, #12
 8004064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_USART1_UART_Init+0x90>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004074:	2200      	movs	r2, #0
 8004076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_USART1_UART_Init+0x90>)
 800407a:	2200      	movs	r2, #0
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004080:	2200      	movs	r2, #0
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004084:	4811      	ldr	r0, [pc, #68]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004086:	f7fe f8a7 	bl	80021d8 <HAL_UART_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004090:	f7ff fec7 	bl	8003e22 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004094:	2100      	movs	r1, #0
 8004096:	480d      	ldr	r0, [pc, #52]	; (80040cc <MX_USART1_UART_Init+0x90>)
 8004098:	f7ff fc15 	bl	80038c6 <HAL_UARTEx_SetTxFifoThreshold>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80040a2:	f7ff febe 	bl	8003e22 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040a6:	2100      	movs	r1, #0
 80040a8:	4808      	ldr	r0, [pc, #32]	; (80040cc <MX_USART1_UART_Init+0x90>)
 80040aa:	f7ff fc4a 	bl	8003942 <HAL_UARTEx_SetRxFifoThreshold>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80040b4:	f7ff feb5 	bl	8003e22 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040b8:	4804      	ldr	r0, [pc, #16]	; (80040cc <MX_USART1_UART_Init+0x90>)
 80040ba:	f7ff fbcb 	bl	8003854 <HAL_UARTEx_DisableFifoMode>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80040c4:	f7ff fead 	bl	8003e22 <Error_Handler>
  }

}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200000cc 	.word	0x200000cc
 80040d0:	40013800 	.word	0x40013800

080040d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <HAL_UART_MspInit+0x7c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d127      	bne.n	8004146 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <HAL_UART_MspInit+0x80>)
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <HAL_UART_MspInit+0x80>)
 80040fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004100:	6613      	str	r3, [r2, #96]	; 0x60
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_UART_MspInit+0x80>)
 8004104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_UART_MspInit+0x80>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <HAL_UART_MspInit+0x80>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_UART_MspInit+0x80>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8004126:	2330      	movs	r3, #48	; 0x30
 8004128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	2302      	movs	r3, #2
 800412c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004132:	2300      	movs	r3, #0
 8004134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004136:	2307      	movs	r3, #7
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413a:	f107 0314 	add.w	r3, r7, #20
 800413e:	4619      	mov	r1, r3
 8004140:	4805      	ldr	r0, [pc, #20]	; (8004158 <HAL_UART_MspInit+0x84>)
 8004142:	f7fc fda3 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004146:	bf00      	nop
 8004148:	3728      	adds	r7, #40	; 0x28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40013800 	.word	0x40013800
 8004154:	40021000 	.word	0x40021000
 8004158:	48000800 	.word	0x48000800

0800415c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800415c:	480d      	ldr	r0, [pc, #52]	; (8004194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800415e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004160:	480d      	ldr	r0, [pc, #52]	; (8004198 <LoopForever+0x6>)
  ldr r1, =_edata
 8004162:	490e      	ldr	r1, [pc, #56]	; (800419c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004164:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <LoopForever+0xe>)
  movs r3, #0
 8004166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004168:	e002      	b.n	8004170 <LoopCopyDataInit>

0800416a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800416c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800416e:	3304      	adds	r3, #4

08004170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004174:	d3f9      	bcc.n	800416a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004176:	4a0b      	ldr	r2, [pc, #44]	; (80041a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004178:	4c0b      	ldr	r4, [pc, #44]	; (80041a8 <LoopForever+0x16>)
  movs r3, #0
 800417a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800417c:	e001      	b.n	8004182 <LoopFillZerobss>

0800417e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800417e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004180:	3204      	adds	r2, #4

08004182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004184:	d3fb      	bcc.n	800417e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004186:	f7ff febf 	bl	8003f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800418a:	f000 f811 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800418e:	f7ff fdd3 	bl	8003d38 <main>

08004192 <LoopForever>:

LoopForever:
    b LoopForever
 8004192:	e7fe      	b.n	8004192 <LoopForever>
  ldr   r0, =_estack
 8004194:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800419c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80041a0:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 80041a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80041a8:	20000158 	.word	0x20000158

080041ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC1_2_IRQHandler>
	...

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4e0d      	ldr	r6, [pc, #52]	; (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b6:	1ba4      	subs	r4, r4, r6
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2500      	movs	r5, #0
 80041bc:	42a5      	cmp	r5, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4e0b      	ldr	r6, [pc, #44]	; (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	; (80041f4 <__libc_init_array+0x44>)
 80041c4:	f000 f820 	bl	8004208 <_init>
 80041c8:	1ba4      	subs	r4, r4, r6
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2500      	movs	r5, #0
 80041ce:	42a5      	cmp	r5, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041d8:	4798      	blx	r3
 80041da:	3501      	adds	r5, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041e2:	4798      	blx	r3
 80041e4:	3501      	adds	r5, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08004250 	.word	0x08004250
 80041ec:	08004250 	.word	0x08004250
 80041f0:	08004250 	.word	0x08004250
 80041f4:	08004254 	.word	0x08004254

080041f8 <memset>:
 80041f8:	4402      	add	r2, r0
 80041fa:	4603      	mov	r3, r0
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	f803 1b01 	strb.w	r1, [r3], #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr
